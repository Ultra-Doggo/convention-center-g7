{"ast":null,"code":"import{User}from\"./User\";import config from\"../config\";function callAuthenticate(state){var xhr=new XMLHttpRequest();xhr.open(\"POST\",\"\".concat(config.baseUrl,\"/login\"),false);xhr.setRequestHeader(\"Content-type\",\"application/x-www-form-urlencoded\");xhr.send(\"email=\"+state.user+\"&password=\"+state.pass);return[xhr.status,xhr.responseText];}function callRegister(state){var xhr=new XMLHttpRequest();xhr.open(\"POST\",\"\".concat(config.baseUrl,\"/register\"),false);xhr.setRequestHeader(\"Content-type\",\"application/x-www-form-urlencoded\");xhr.send(\"name=\"+state.name+\"&email=\"+state.user+\"&password=\"+state.pass);return xhr.status;}export function authenticate(state,storage){if(state.user!==\"\"&&state.pass!==\"\"){var authCode=callAuthenticate(state);if(authCode[0]!==200){if(authCode[0]===204||authCode[0]===205){return[false,'Invalid email or password'];}else{return[false,'Error has occured'];}}var data=JSON.parse(authCode[1]);if(authCode[0]===200){var newUser=new User(state.user,data.results);storage.setUser(newUser);return[true];}}else{return[false,'Please fill in all fields'];}}export function register(state,storage){var emailFormat=/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,24})+$/;var passFormat=/^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.{8,})/;if(state.pass!==state.repass){return[false,'Passwords do not match'];}else if(!state.user.match(emailFormat)){return[false,\"\".concat(state.user,\" is not a valid email address\")];}else if(!state.pass.match(passFormat)){return[false,'Passwords must be at least 8 characters long; contain at least 1 lower case letter [a-z]; at least 1 upper case letter [A-Z]; at least 1 number [0-9]'];}else if(state.name!==\"\"&&state.user!==\"\"&&state.pass!==\"\"&&state.repass!==\"\"){var authCode=callAuthenticate(state);if(authCode[0]===200||authCode[0]===204){return[false,\"An account already exists for \".concat(state.name)];}else if(authCode[0]===205){var registerCode=callRegister(state);if(registerCode===200){var newUser=new User(state.user,state.name);storage.setUser(newUser);return[true];}else{return[false,'Error has occurred'];}}else{return[false,'Error has occurred'];}}else{return[false,'Please fill in all fields'];}}","map":{"version":3,"sources":["/Users/toto/Desktop/convention-center-g7/webapp/src/services/Validator.js"],"names":["User","config","callAuthenticate","state","xhr","XMLHttpRequest","open","baseUrl","setRequestHeader","send","user","pass","status","responseText","callRegister","name","authenticate","storage","authCode","data","JSON","parse","newUser","results","setUser","register","emailFormat","passFormat","repass","match","registerCode"],"mappings":"AAAA,OAAQA,IAAR,KAAmB,QAAnB,CACA,MAAOC,CAAAA,MAAP,KAAmB,WAAnB,CAEA,QAASC,CAAAA,gBAAT,CAA0BC,KAA1B,CAAiC,CAC/B,GAAIC,CAAAA,GAAG,CAAG,GAAIC,CAAAA,cAAJ,EAAV,CACAD,GAAG,CAACE,IAAJ,CAAS,MAAT,WAAoBL,MAAM,CAACM,OAA3B,WAA4C,KAA5C,EACAH,GAAG,CAACI,gBAAJ,CAAqB,cAArB,CAAqC,mCAArC,EACAJ,GAAG,CAACK,IAAJ,CAAS,SAASN,KAAK,CAACO,IAAf,CAAoB,YAApB,CAAiCP,KAAK,CAACQ,IAAhD,EACA,MAAO,CAACP,GAAG,CAACQ,MAAL,CAAaR,GAAG,CAACS,YAAjB,CAAP,CACD,CAED,QAASC,CAAAA,YAAT,CAAsBX,KAAtB,CAA6B,CAC3B,GAAIC,CAAAA,GAAG,CAAG,GAAIC,CAAAA,cAAJ,EAAV,CACAD,GAAG,CAACE,IAAJ,CAAS,MAAT,WAAoBL,MAAM,CAACM,OAA3B,cAA+C,KAA/C,EACAH,GAAG,CAACI,gBAAJ,CAAqB,cAArB,CAAqC,mCAArC,EACAJ,GAAG,CAACK,IAAJ,CAAS,QAAQN,KAAK,CAACY,IAAd,CAAmB,SAAnB,CAA6BZ,KAAK,CAACO,IAAnC,CAAwC,YAAxC,CAAqDP,KAAK,CAACQ,IAApE,EACA,MAAOP,CAAAA,GAAG,CAACQ,MAAX,CACD,CAED,MAAO,SAASI,CAAAA,YAAT,CAAsBb,KAAtB,CAA6Bc,OAA7B,CAAsC,CACzC,GAAId,KAAK,CAACO,IAAN,GAAe,EAAf,EAAqBP,KAAK,CAACQ,IAAN,GAAe,EAAxC,CAA4C,CACxC,GAAIO,CAAAA,QAAQ,CAAGhB,gBAAgB,CAACC,KAAD,CAA/B,CACA,GAAIe,QAAQ,CAAC,CAAD,CAAR,GAAgB,GAApB,CAAyB,CACvB,GAAIA,QAAQ,CAAC,CAAD,CAAR,GAAgB,GAAhB,EAAuBA,QAAQ,CAAC,CAAD,CAAR,GAAgB,GAA3C,CAAgD,CAC9C,MAAO,CAAC,KAAD,CAAQ,2BAAR,CAAP,CACD,CAFD,IAEO,CACL,MAAO,CAAC,KAAD,CAAQ,mBAAR,CAAP,CACD,CACF,CACD,GAAIC,CAAAA,IAAI,CAAGC,IAAI,CAACC,KAAL,CAAWH,QAAQ,CAAC,CAAD,CAAnB,CAAX,CACA,GAAIA,QAAQ,CAAC,CAAD,CAAR,GAAgB,GAApB,CAAyB,CACvB,GAAII,CAAAA,OAAO,CAAG,GAAItB,CAAAA,IAAJ,CAASG,KAAK,CAACO,IAAf,CAAqBS,IAAI,CAACI,OAA1B,CAAd,CACAN,OAAO,CAACO,OAAR,CAAgBF,OAAhB,EACA,MAAO,CAAC,IAAD,CAAP,CACD,CACJ,CAfD,IAeO,CACH,MAAO,CAAC,KAAD,CAAQ,2BAAR,CAAP,CACH,CACJ,CAED,MAAO,SAASG,CAAAA,QAAT,CAAkBtB,KAAlB,CAAyBc,OAAzB,CAAkC,CACrC,GAAIS,CAAAA,WAAW,CAAG,gDAAlB,CACA,GAAIC,CAAAA,UAAU,CAAG,6CAAjB,CAEA,GAAIxB,KAAK,CAACQ,IAAN,GAAeR,KAAK,CAACyB,MAAzB,CAAiC,CAC/B,MAAO,CAAC,KAAD,CAAQ,wBAAR,CAAP,CACD,CAFD,IAEO,IAAI,CAACzB,KAAK,CAACO,IAAN,CAAWmB,KAAX,CAAiBH,WAAjB,CAAL,CAAoC,CACvC,MAAO,CAAC,KAAD,WAAWvB,KAAK,CAACO,IAAjB,kCAAP,CACH,CAFM,IAEA,IAAI,CAACP,KAAK,CAACQ,IAAN,CAAWkB,KAAX,CAAiBF,UAAjB,CAAL,CAAkC,CACrC,MAAO,CAAC,KAAD,CAAQ,uJAAR,CAAP,CACH,CAFM,IAEA,IAAIxB,KAAK,CAACY,IAAN,GAAe,EAAf,EAAqBZ,KAAK,CAACO,IAAN,GAAe,EAApC,EAA0CP,KAAK,CAACQ,IAAN,GAAe,EAAzD,EAA+DR,KAAK,CAACyB,MAAN,GAAiB,EAApF,CAAuF,CAC1F,GAAIV,CAAAA,QAAQ,CAAGhB,gBAAgB,CAACC,KAAD,CAA/B,CACA,GAAIe,QAAQ,CAAC,CAAD,CAAR,GAAgB,GAAhB,EAAuBA,QAAQ,CAAC,CAAD,CAAR,GAAgB,GAA3C,CAAgD,CAC9C,MAAO,CAAC,KAAD,yCAAyCf,KAAK,CAACY,IAA/C,EAAP,CACD,CAFD,IAEO,IAAIG,QAAQ,CAAC,CAAD,CAAR,GAAgB,GAApB,CAAyB,CAC5B,GAAIY,CAAAA,YAAY,CAAGhB,YAAY,CAACX,KAAD,CAA/B,CACA,GAAI2B,YAAY,GAAK,GAArB,CAA0B,CACxB,GAAIR,CAAAA,OAAO,CAAG,GAAItB,CAAAA,IAAJ,CAASG,KAAK,CAACO,IAAf,CAAqBP,KAAK,CAACY,IAA3B,CAAd,CACAE,OAAO,CAACO,OAAR,CAAgBF,OAAhB,EACA,MAAO,CAAC,IAAD,CAAP,CACD,CAJD,IAIO,CACD,MAAO,CAAC,KAAD,CAAQ,oBAAR,CAAP,CACL,CACJ,CATM,IASA,CACJ,MAAO,CAAC,KAAD,CAAQ,oBAAR,CAAP,CACF,CACJ,CAhBM,IAgBA,CACH,MAAO,CAAC,KAAD,CAAQ,2BAAR,CAAP,CACH,CACJ","sourcesContent":["import {User} from \"./User\";\nimport config from \"../config\";\n\nfunction callAuthenticate(state) {\n  let xhr = new XMLHttpRequest();\n  xhr.open(\"POST\", `${config.baseUrl}/login`, false);\n  xhr.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\n  xhr.send(\"email=\"+state.user+\"&password=\"+state.pass);\n  return [xhr.status, xhr.responseText];\n}\n\nfunction callRegister(state) {\n  let xhr = new XMLHttpRequest();\n  xhr.open(\"POST\", `${config.baseUrl}/register`, false);\n  xhr.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\n  xhr.send(\"name=\"+state.name+\"&email=\"+state.user+\"&password=\"+state.pass);\n  return xhr.status;\n}\n\nexport function authenticate(state, storage) {\n    if (state.user !== \"\" && state.pass !== \"\") {\n        let authCode = callAuthenticate(state);\n        if (authCode[0] !== 200) {\n          if (authCode[0] === 204 || authCode[0] === 205) {\n            return [false, 'Invalid email or password']\n          } else {\n            return [false, 'Error has occured']\n          }\n        }\n        let data = JSON.parse(authCode[1]);\n        if (authCode[0] === 200) {\n          let newUser = new User(state.user, data.results);\n          storage.setUser(newUser);\n          return [true];\n        }\n    } else {\n        return [false, 'Please fill in all fields'];\n    }\n}\n\nexport function register(state, storage) {\n    let emailFormat = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,24})+$/;\n    let passFormat = /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.{8,})/;\n\n    if (state.pass !== state.repass) {\n      return [false, 'Passwords do not match']\n    } else if (!state.user.match(emailFormat)) {\n        return [false, `${state.user} is not a valid email address`]\n    } else if (!state.pass.match(passFormat)){\n        return [false, 'Passwords must be at least 8 characters long; contain at least 1 lower case letter [a-z]; at least 1 upper case letter [A-Z]; at least 1 number [0-9]']\n    } else if (state.name !== \"\" && state.user !== \"\" && state.pass !== \"\" && state.repass !== \"\"){\n        let authCode = callAuthenticate(state);\n        if (authCode[0] === 200 || authCode[0] === 204) {\n          return [false, `An account already exists for ${state.name}`]\n        } else if (authCode[0] === 205) {\n            let registerCode = callRegister(state);\n            if (registerCode === 200) {\n              let newUser = new User(state.user, state.name);\n              storage.setUser(newUser);\n              return [true];\n            } else {\n                  return [false, 'Error has occurred']\n            }\n        } else {\n           return [false, 'Error has occurred']\n        }\n    } else {\n        return [false, 'Please fill in all fields']\n    }\n}\n"]},"metadata":{},"sourceType":"module"}