{"ast":null,"code":"import { User } from \"./User\";\nimport config from \"../config\";\n\nfunction callAuthenticate(state) {\n  let xhr = new XMLHttpRequest();\n  xhr.open(\"POST\", `${config.baseUrl}/login`, false);\n  xhr.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\n  xhr.send(\"email=\" + state.user + \"&password=\" + state.pass);\n  return [xhr.status, xhr.responseText];\n}\n\nfunction callRegister(state) {\n  let xhr = new XMLHttpRequest();\n  xhr.open(\"POST\", `${config.baseUrl}/register`, false);\n  xhr.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\n  xhr.send(\"name=\" + state.name + \"&email=\" + state.user + \"&password=\" + state.pass);\n  return xhr.status;\n}\n\nexport function authenticate(state, storage) {\n  if (state.user !== \"\" && state.pass !== \"\") {\n    let authCode = callAuthenticate(state);\n\n    if (authCode[0] !== 200) {\n      if (authCode[0] === 204 || authCode[0] === 205) {\n        return [false, 'Invalid email or password'];\n      } else {\n        return [false, 'Error has occured'];\n      }\n    }\n\n    let data = JSON.parse(authCode[1]);\n\n    if (authCode[0] === 200) {\n      let newUser = new User(state.user, data.results);\n      storage.setUser(newUser);\n      return [true];\n    }\n  } else {\n    return [false, 'Please fill in all fields'];\n  }\n}\nexport function register(state, storage) {\n  let emailFormat = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,24})+$/;\n  let passFormat = /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.{8,})/;\n\n  if (state.pass !== state.repass) {\n    return [false, 'Passwords do not match'];\n  } else if (!state.user.match(emailFormat)) {\n    return [false, `${state.user} is not a valid email address`];\n  } else if (!state.pass.match(passFormat)) {\n    return [false, 'Passwords must be at least 8 characters long; contain at least 1 lower case letter [a-z]; at least 1 upper case letter [A-Z]; at least 1 number [0-9]'];\n  } else if (state.name !== \"\" && state.user !== \"\" && state.pass !== \"\" && state.repass !== \"\") {\n    let authCode = callAuthenticate(state);\n\n    if (authCode[0] === 200 || authCode[0] === 204) {\n      return [false, `An account already exists for ${state.name}`];\n    } else if (authCode[0] === 205) {\n      let registerCode = callRegister(state);\n\n      if (registerCode === 200) {\n        let newUser = new User(state.user, state.name);\n        storage.setUser(newUser);\n        return [true];\n      } else {\n        return [false, 'Error has occurred'];\n      }\n    } else {\n      return [false, 'Error has occurred'];\n    }\n  } else {\n    return [false, 'Please fill in all fields'];\n  }\n}","map":{"version":3,"sources":["/Users/toto/Desktop/convention-center-g7/webapp/src/services/Validator.js"],"names":["User","config","callAuthenticate","state","xhr","XMLHttpRequest","open","baseUrl","setRequestHeader","send","user","pass","status","responseText","callRegister","name","authenticate","storage","authCode","data","JSON","parse","newUser","results","setUser","register","emailFormat","passFormat","repass","match","registerCode"],"mappings":"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","sourcesContent":["import {User} from \"./User\";\nimport config from \"../config\";\n\nfunction callAuthenticate(state) {\n  let xhr = new XMLHttpRequest();\n  xhr.open(\"POST\", `${config.baseUrl}/login`, false);\n  xhr.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\n  xhr.send(\"email=\"+state.user+\"&password=\"+state.pass);\n  return [xhr.status, xhr.responseText];\n}\n\nfunction callRegister(state) {\n  let xhr = new XMLHttpRequest();\n  xhr.open(\"POST\", `${config.baseUrl}/register`, false);\n  xhr.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\n  xhr.send(\"name=\"+state.name+\"&email=\"+state.user+\"&password=\"+state.pass);\n  return xhr.status;\n}\n\nexport function authenticate(state, storage) {\n    if (state.user !== \"\" && state.pass !== \"\") {\n        let authCode = callAuthenticate(state);\n        if (authCode[0] !== 200) {\n          if (authCode[0] === 204 || authCode[0] === 205) {\n            return [false, 'Invalid email or password']\n          } else {\n            return [false, 'Error has occured']\n          }\n        }\n        let data = JSON.parse(authCode[1]);\n        if (authCode[0] === 200) {\n          let newUser = new User(state.user, data.results);\n          storage.setUser(newUser);\n          return [true];\n        }\n    } else {\n        return [false, 'Please fill in all fields'];\n    }\n}\n\nexport function register(state, storage) {\n    let emailFormat = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,24})+$/;\n    let passFormat = /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.{8,})/;\n\n    if (state.pass !== state.repass) {\n      return [false, 'Passwords do not match']\n    } else if (!state.user.match(emailFormat)) {\n        return [false, `${state.user} is not a valid email address`]\n    } else if (!state.pass.match(passFormat)){\n        return [false, 'Passwords must be at least 8 characters long; contain at least 1 lower case letter [a-z]; at least 1 upper case letter [A-Z]; at least 1 number [0-9]']\n    } else if (state.name !== \"\" && state.user !== \"\" && state.pass !== \"\" && state.repass !== \"\"){\n        let authCode = callAuthenticate(state);\n        if (authCode[0] === 200 || authCode[0] === 204) {\n          return [false, `An account already exists for ${state.name}`]\n        } else if (authCode[0] === 205) {\n            let registerCode = callRegister(state);\n            if (registerCode === 200) {\n              let newUser = new User(state.user, state.name);\n              storage.setUser(newUser);\n              return [true];\n            } else {\n                  return [false, 'Error has occurred']\n            }\n        } else {\n           return [false, 'Error has occurred']\n        }\n    } else {\n        return [false, 'Please fill in all fields']\n    }\n}\n"]},"metadata":{},"sourceType":"module"}