{"version":3,"file":"index.ie11.production.min.js","sources":["../src/utils/isHTMLElement.ts","../src/constants.ts","../src/utils/isNullOrUndefined.ts","../src/utils/isObject.ts","../src/utils/isKey.ts","../src/utils/compact.ts","../src/utils/stringToPath.ts","../src/utils/set.ts","../src/logic/transformToNestObject.ts","../src/utils/isUndefined.ts","../src/utils/get.ts","../src/logic/removeAllEventListeners.ts","../src/logic/getRadioValue.ts","../src/utils/isRadioInput.ts","../src/utils/isFileInput.ts","../src/utils/isCheckBoxInput.ts","../src/utils/isMultipleSelect.ts","../src/logic/getCheckboxValue.ts","../src/logic/getFieldValue.ts","../src/logic/getMultipleSelectValue.ts","../src/utils/isDetached.ts","../src/utils/isEmptyObject.ts","../src/utils/isBoolean.ts","../src/utils/unset.ts","../src/logic/findRemovedFieldAndRemoveListener.ts","../src/utils/isPrimitive.ts","../src/utils/deepMerge.ts","../src/logic/setFieldArrayDirtyFields.ts","../src/utils/isString.ts","../src/logic/getFieldsValues.ts","../src/utils/deepEqual.ts","../src/logic/isErrorStateChanged.ts","../src/utils/isRegex.ts","../src/logic/getValueAndMessage.ts","../src/utils/isFunction.ts","../src/utils/isMessage.ts","../src/logic/getValidateError.ts","../src/logic/appendErrors.ts","../src/logic/validateField.ts","../src/utils/getPath.ts","../src/logic/assignWatchFields.ts","../src/logic/skipValidation.ts","../src/logic/getNodeParentName.ts","../src/logic/isNameInFieldArray.ts","../src/utils/isWeb.ts","../src/utils/cloneObject.ts","../src/utils/validationModeChecker.ts","../src/utils/isRadioOrCheckbox.ts","../src/useForm.ts","../src/useFormContext.tsx","../src/logic/generateId.ts","../src/utils/remove.ts","../src/utils/move.ts","../src/utils/swap.ts","../src/utils/prepend.ts","../src/utils/insert.ts","../src/utils/fillEmptyArray.ts","../src/utils/fillBooleanArray.ts","../src/useFieldArray.ts","../src/useField.ts","../src/logic/getInputValue.ts","../src/controller.tsx","../src/logic/attachEventListeners.ts","../src/utils/isSelectInput.ts","../src/logic/focusOnErrorField.ts","../src/utils/onDomRemove.ts","../src/useWatch.ts"],"sourcesContent":["export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n  INPUT: 'input',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const SELECT = 'select';\n\nexport const UNDEFINED = 'undefined';\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","export default (value: unknown): value is null | undefined => value == null;\n","import isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !(value instanceof Date);\n","export default (value: string) => /^\\w*$/.test(value);\n","export default (value: any[]) => value.filter(Boolean);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(\n    input\n      .replace(/[\"|']/g, '')\n      .replace(/\\[/g, '.')\n      .replace(/\\]/g, '')\n      .split('.'),\n  );\n","import isObject from './isObject';\nimport isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport { FieldValues } from '../types';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import set from '../utils/set';\nimport isKey from '../utils/isKey';\nimport { FieldValues } from '../types';\n\nexport default (data: FieldValues, value: Record<string, any> = {}): any => {\n  for (const key in data) {\n    !isKey(key) ? set(value, key, data[key]) : (value[key] = data[key]);\n  }\n  return value;\n};\n","export default (val: unknown): val is undefined => val === undefined;\n","import isUndefined from './isUndefined';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport compact from './compact';\n\nexport default (obj: any = {}, path: string, defaultValue?: unknown) => {\n  const result = compact(path.split(/[,[\\].]+?/)).reduce(\n    (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n    obj,\n  );\n\n  return isUndefined(result) || result === obj\n    ? isUndefined(obj[path])\n      ? defaultValue\n      : obj[path]\n    : result;\n};\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Ref } from '../types';\n\nexport default (\n  ref: Ref,\n  validateWithStateUpdate: EventListenerOrEventListenerObject,\n): void => {\n  if (isHTMLElement(ref) && ref.removeEventListener) {\n    ref.removeEventListener(EVENTS.INPUT, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.CHANGE, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.BLUR, validateWithStateUpdate);\n  }\n};\n","import { RadioOrCheckboxOption } from '../types';\n\ntype RadioFieldResult = {\n  isValid: boolean;\n  value: number | string;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: '',\n};\n\nexport default (options?: RadioOrCheckboxOption[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.ref.checked\n            ? {\n                isValid: true,\n                value: option.ref.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","import { FieldElement } from '../types';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-multiple`;\n","import isUndefined from '../utils/isUndefined';\nimport { RadioOrCheckboxOption } from '../types';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: RadioOrCheckboxOption[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.ref.checked)\n        .map(({ ref: { value } }) => value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    const { checked, value, attributes } = options[0].ref;\n\n    return checked\n      ? attributes && !isUndefined((attributes as any).value)\n        ? isUndefined(value) || value === ''\n          ? validResult\n          : { value: value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getMultipleSelectValue from './getMultipleSelectValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport get from '../utils/get';\nimport isFileInput from '../utils/isFileInput';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport getCheckboxValue from './getCheckboxValue';\nimport { FieldRefs, FieldValues, InternalFieldName } from '../types';\n\nexport default function getFieldValue<TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  name: InternalFieldName<TFieldValues>,\n  shallowFieldsStateRef?: React.MutableRefObject<Partial<FieldValues>>,\n  excludeDisabled?: boolean,\n) {\n  const field = fieldsRef.current[name]!;\n\n  if (field) {\n    const {\n      ref: { value, disabled },\n      ref,\n      valueAsNumber,\n      valueAsDate,\n      setValueAs,\n    } = field;\n\n    if (disabled && excludeDisabled) {\n      return;\n    }\n\n    if (isFileInput(ref)) {\n      return ref.files;\n    }\n\n    if (isRadioInput(ref)) {\n      return getRadioValue(field.options).value;\n    }\n\n    if (isMultipleSelect(ref)) {\n      return getMultipleSelectValue(ref.options);\n    }\n\n    if (isCheckBox(ref)) {\n      return getCheckboxValue(field.options).value;\n    }\n\n    return valueAsNumber\n      ? +value\n      : valueAsDate\n      ? (ref as HTMLInputElement).valueAsDate\n      : setValueAs\n      ? setValueAs(value)\n      : value;\n  }\n\n  if (shallowFieldsStateRef) {\n    return get(shallowFieldsStateRef.current, name);\n  }\n}\n","export default (\n  options: HTMLOptionElement[] | HTMLOptionsCollection,\n): string[] =>\n  [...options]\n    .filter(({ selected }): boolean => selected)\n    .map(({ value }): string => value);\n","import { Ref } from '../types';\n\nexport default function isDetached(element: Ref): boolean {\n  if (!element) {\n    return true;\n  }\n\n  if (\n    !(element instanceof HTMLElement) ||\n    element.nodeType === Node.DOCUMENT_NODE\n  ) {\n    return false;\n  }\n\n  return isDetached(element.parentNode as Ref);\n}\n","import isObject from './isObject';\nimport { EmptyObject } from '../types';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport isEmptyObject from './isEmptyObject';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport isBoolean from './isBoolean';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const path = updatePath.slice(0, -1);\n  const length = path.length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef = undefined;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef = undefined;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import * as React from 'react';\nimport removeAllEventListeners from './removeAllEventListeners';\nimport getFieldValue from './getFieldValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport set from '../utils/set';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDetached from '../utils/isDetached';\nimport unset from '../utils/unset';\nimport compact from '../utils/compact';\nimport isUndefined from '../utils/isUndefined';\nimport { Field, FieldRefs, FieldValues, Ref } from '../types';\n\nconst isSameRef = (fieldValue: Field, ref: Ref) =>\n  fieldValue && fieldValue.ref === ref;\n\nexport default function findRemovedFieldAndRemoveListener<\n  TFieldValues extends FieldValues\n>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  handleChange: ({ type, target }: Event) => Promise<void | boolean>,\n  field: Field,\n  shallowFieldsStateRef: React.MutableRefObject<FieldValues>,\n  shouldUnregister?: boolean,\n  forceDelete?: boolean,\n): void {\n  const {\n    ref,\n    ref: { name },\n  } = field;\n  const fieldRef = fieldsRef.current[name] as Field;\n\n  if (!shouldUnregister) {\n    const value = getFieldValue(fieldsRef, name, shallowFieldsStateRef);\n\n    !isUndefined(value) && set(shallowFieldsStateRef.current, name, value);\n  }\n\n  if (!ref.type || !fieldRef) {\n    delete fieldsRef.current[name];\n    return;\n  }\n\n  if (isRadioInput(ref) || isCheckBoxInput(ref)) {\n    if (Array.isArray(fieldRef.options) && fieldRef.options.length) {\n      compact(fieldRef.options).forEach((option = {}, index): void => {\n        if (\n          (isDetached(option.ref) && isSameRef(option, option.ref)) ||\n          forceDelete\n        ) {\n          removeAllEventListeners(option.ref, handleChange);\n          unset(fieldRef.options, `[${index}]`);\n        }\n      });\n\n      if (fieldRef.options && !compact(fieldRef.options).length) {\n        delete fieldsRef.current[name];\n      }\n    } else {\n      delete fieldsRef.current[name];\n    }\n  } else if ((isDetached(ref) && isSameRef(fieldRef, ref)) || forceDelete) {\n    removeAllEventListeners(ref, handleChange);\n\n    delete fieldsRef.current[name];\n  }\n}\n","import isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\nimport { Primitive } from '../types';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isObject from './isObject';\nimport isPrimitive from './isPrimitive';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>\n>(target: T, source: U): T & U {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    try {\n      target[key] =\n        (isObject(targetValue) && isObject(sourceValue)) ||\n        (Array.isArray(targetValue) && Array.isArray(sourceValue))\n          ? deepMerge(targetValue, sourceValue)\n          : sourceValue;\n    } catch {}\n  }\n\n  return target;\n}\n","import { get } from '../utils';\nimport set from '../utils/set';\nimport { deepMerge } from '../utils/deepMerge';\n\nfunction setDirtyFields<\n  T extends Record<string, unknown>[],\n  U extends Record<string, unknown>[],\n  K extends Record<string, boolean | []>\n>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n  parentNode?: K,\n  parentName?: keyof K,\n) {\n  let index = -1;\n\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setDirtyFields(\n          values[index][key] as T,\n          get(defaultValues[index] || {}, key, []),\n          dirtyFields[index][key] as [],\n          dirtyFields[index],\n          key,\n        );\n      } else {\n        get(defaultValues[index] || {}, key) === values[index][key]\n          ? set(dirtyFields[index] || {}, key)\n          : (dirtyFields[index] = {\n              ...dirtyFields[index],\n              [key]: true,\n            });\n      }\n    }\n\n    parentNode &&\n      !dirtyFields.length &&\n      delete parentNode[parentName as keyof K];\n  }\n\n  return dirtyFields;\n}\n\nexport default <T extends U, U extends Record<string, unknown>[]>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n) =>\n  deepMerge(\n    setDirtyFields(values, defaultValues, dirtyFields),\n    setDirtyFields(defaultValues, values, dirtyFields),\n  );\n","export default (value: unknown): value is string => typeof value === 'string';\n","import * as React from 'react';\nimport getFieldValue from './getFieldValue';\nimport isString from '../utils/isString';\nimport { deepMerge } from '../utils/deepMerge';\nimport isUndefined from '../utils/isUndefined';\nimport { InternalFieldName, FieldValues, FieldRefs } from '../types';\nimport transformToNestObject from './transformToNestObject';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  shallowFieldsState: Record<string, any>,\n  shouldUnregister: boolean,\n  excludeDisabled?: boolean,\n  search?:\n    | InternalFieldName<TFieldValues>\n    | InternalFieldName<TFieldValues>[]\n    | { nest: boolean },\n) => {\n  const output = {} as TFieldValues;\n\n  for (const name in fieldsRef.current) {\n    if (\n      isUndefined(search) ||\n      (isString(search)\n        ? name.startsWith(search)\n        : Array.isArray(search) && search.find((data) => name.startsWith(data)))\n    ) {\n      output[name as InternalFieldName<TFieldValues>] = getFieldValue(\n        fieldsRef,\n        name,\n        undefined,\n        excludeDisabled,\n      );\n    }\n  }\n\n  return shouldUnregister\n    ? transformToNestObject(output)\n    : deepMerge(shallowFieldsState, transformToNestObject(output));\n};\n","import * as React from 'react';\nimport isObject from '../utils/isObject';\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(\n  object1: any,\n  object2: any,\n  isErrorObject?: boolean,\n) {\n  if (\n    isPrimitive(object1) ||\n    isPrimitive(object2) ||\n    object1 instanceof Date ||\n    object2 instanceof Date\n  ) {\n    return object1 === object2;\n  }\n\n  if (!React.isValidElement(object1)) {\n    const keys1 = Object.keys(object1);\n    const keys2 = Object.keys(object2);\n\n    if (keys1.length !== keys2.length) {\n      return false;\n    }\n\n    for (const key of keys1) {\n      const val1 = object1[key];\n\n      if (!(isErrorObject && key === 'ref')) {\n        const val2 = object2[key];\n\n        if (\n          (isObject(val1) || Array.isArray(val1)) &&\n          (isObject(val2) || Array.isArray(val2))\n            ? !deepEqual(val1, val2, isErrorObject)\n            : val1 !== val2\n        ) {\n          return false;\n        }\n      }\n    }\n  }\n\n  return true;\n}\n","import get from '../utils/get';\nimport isUndefined from '../utils/isUndefined';\nimport deepEqual from '../utils/deepEqual';\nimport {\n  FieldValues,\n  InternalFieldName,\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldError,\n} from '../types';\n\nexport default <TFieldValues extends FieldValues>({\n  errors,\n  name,\n  error,\n  validFields,\n  fieldsWithValidation,\n}: {\n  errors: FieldErrors<TFieldValues>;\n  error: FieldError | undefined;\n  name: InternalFieldName<TFieldValues>;\n  validFields: FieldNamesMarkedBoolean<TFieldValues>;\n  fieldsWithValidation: FieldNamesMarkedBoolean<TFieldValues>;\n}): boolean => {\n  const isValid = isUndefined(error);\n  const previousError = get(errors, name);\n\n  return (\n    (isValid && !!previousError) ||\n    (!isValid && !deepEqual(previousError, error, true)) ||\n    (isValid && get(fieldsWithValidation, name) && !get(validFields, name))\n  );\n};\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\nimport { ValidationRule } from '../types';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","import * as React from 'react';\nimport isString from '../utils/isString';\nimport { Message } from '../types';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || React.isValidElement(value as JSX.Element);\n","import isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport { FieldError, ValidateResult, Ref } from '../types';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (isMessage(result) || (isBoolean(result) && !result)) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import {\n  InternalFieldName,\n  ValidateResult,\n  InternalFieldErrors,\n} from '../types';\n\nexport default <TFieldValues>(\n  name: InternalFieldName<TFieldValues>,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors<TFieldValues>,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getCheckboxValue from './getCheckboxValue';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isRadioInput from '../utils/isRadioInput';\nimport getValueAndMessage from './getValueAndMessage';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isString from '../utils/isString';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isObject from '../utils/isObject';\nimport isFunction from '../utils/isFunction';\nimport getFieldsValue from './getFieldValue';\nimport isRegex from '../utils/isRegex';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport getValidateError from './getValidateError';\nimport appendErrors from './appendErrors';\nimport { INPUT_VALIDATION_RULES } from '../constants';\nimport {\n  Field,\n  FieldValues,\n  FieldRefs,\n  Message,\n  FieldError,\n  InternalFieldName,\n  InternalFieldErrors,\n} from '../types';\n\nexport default async <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  validateAllFieldCriteria: boolean,\n  {\n    ref,\n    ref: { value },\n    options,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n  }: Field,\n  shallowFieldsStateRef: React.MutableRefObject<Record<string, any>>,\n): Promise<InternalFieldErrors<TFieldValues>> => {\n  const name: InternalFieldName<TFieldValues> = ref.name;\n  const error: InternalFieldErrors<TFieldValues> = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty = value === '';\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...(exceedMax\n        ? appendErrorsCurry(maxType, message)\n        : appendErrorsCurry(minType, message)),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(value))) ||\n      (isBoolean(value) && !value) ||\n      (isCheckBox && !getCheckboxValue(options).isValid) ||\n      (isRadio && !getRadioValue(options).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: isRadioOrCheckbox\n          ? (((fieldsRef.current[name] as Field).options || [])[0] || {}).ref\n          : ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if ((!isNullOrUndefined(min) || !isNullOrUndefined(max)) && value !== '') {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNaN(value)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(value);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(value);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(value) && !isEmpty && (maxLength || minLength)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      value.length > maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      value.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !patternValue.test(value)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    const fieldValue = getFieldsValue(fieldsRef, name, shallowFieldsStateRef);\n    const validateRef = isRadioOrCheckbox && options ? options[0].ref : ref;\n\n    if (isFunction(validate)) {\n      const result = await validate(fieldValue);\n      const validateError = getValidateError(result, validateRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n      for (const [key, validateFunction] of Object.entries(validate)) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateResult = await validateFunction(fieldValue);\n        const validateError = getValidateError(\n          validateResult,\n          validateRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: validateRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  return error;\n};\n","import isPrimitive from './isPrimitive';\nimport isObject from './isObject';\nimport { FieldName } from '../types';\n\nexport const getPath = <TFieldValues>(\n  rootPath: FieldName<TFieldValues>,\n  values: any,\n  paths: FieldName<TFieldValues>[] = [],\n): FieldName<TFieldValues>[] => {\n  for (const property in values) {\n    const rootName = (rootPath +\n      (isObject(values)\n        ? `.${property}`\n        : `[${property}]`)) as FieldName<TFieldValues>;\n\n    isPrimitive(values[property])\n      ? paths.push(rootName)\n      : getPath(rootName, values[property], paths);\n  }\n\n  return paths;\n};\n","import get from '../utils/get';\nimport { getPath } from '../utils/getPath';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isUndefined from '../utils/isUndefined';\nimport isObject from '../utils/isObject';\nimport {\n  DeepPartial,\n  FieldValue,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n} from '../types';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldValues: TFieldValues,\n  fieldName: InternalFieldName<TFieldValues>,\n  watchFields: Set<InternalFieldName<TFieldValues>>,\n  inputValue: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  isSingleField?: boolean,\n):\n  | FieldValue<TFieldValues>\n  | UnpackNestedValue<DeepPartial<TFieldValues>>\n  | undefined => {\n  let value = undefined;\n\n  watchFields.add(fieldName);\n\n  if (!isEmptyObject(fieldValues)) {\n    value = get(fieldValues, fieldName);\n\n    if (isObject(value) || Array.isArray(value)) {\n      getPath(fieldName, value).forEach((name) => watchFields.add(name));\n    }\n  }\n\n  return isUndefined(value)\n    ? isSingleField\n      ? inputValue\n      : get(inputValue, fieldName)\n    : value;\n};\n","export default ({\n  isOnBlur,\n  isOnChange,\n  isOnTouch,\n  isTouched,\n  isReValidateOnBlur,\n  isReValidateOnChange,\n  isBlurEvent,\n  isSubmitted,\n  isOnAll,\n}: {\n  isOnAll?: boolean;\n  isOnBlur?: boolean;\n  isOnChange?: boolean;\n  isReValidateOnBlur?: boolean;\n  isReValidateOnChange?: boolean;\n  isBlurEvent?: boolean;\n  isSubmitted?: boolean;\n  isOnTouch?: boolean;\n  isTouched?: boolean;\n}) => {\n  if (isOnAll) {\n    return false;\n  } else if (!isSubmitted && isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? isReValidateOnBlur : isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? isReValidateOnChange : isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","export default (name: string) => name.substring(0, name.indexOf('['));\n","import { FieldValues, InternalFieldName } from '../types';\n\nexport const isMatchFieldArrayName = (name: string, searchName: string) =>\n  RegExp(\n    `^${searchName}([|.)\\\\d+`.replace(/\\[/g, '\\\\[').replace(/\\]/g, '\\\\]'),\n  ).test(name);\n\nexport default (\n  names: Set<InternalFieldName<FieldValues>>,\n  name: InternalFieldName<FieldValues>,\n) => [...names].some((current) => isMatchFieldArrayName(name, current));\n","import { UNDEFINED } from '../constants';\n\nexport default typeof window !== UNDEFINED && typeof document !== UNDEFINED;\n","import isPrimitive from './isPrimitive';\nimport isWeb from './isWeb';\n\nexport default function cloneObject<T extends unknown>(data: T): T {\n  let copy: any;\n\n  if (isPrimitive(data) || (isWeb && data instanceof File)) {\n    return data;\n  }\n\n  if (data instanceof Date) {\n    copy = new Date(data.getTime());\n    return copy;\n  }\n\n  if (data instanceof Set) {\n    copy = new Set();\n    for (const item of data) {\n      copy.add(item);\n    }\n    return copy;\n  }\n\n  if (data instanceof Map) {\n    copy = new Map();\n    for (const key of data.keys()) {\n      copy.set(key, cloneObject(data.get(key)));\n    }\n    return copy;\n  }\n\n  copy = Array.isArray(data) ? [] : {};\n\n  for (const key in data) {\n    copy[key] = cloneObject(data[key]);\n  }\n\n  return copy;\n}\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","import isRadioInput from './isRadioInput';\nimport isCheckBoxInput from './isCheckBoxInput';\nimport { FieldElement } from '../types';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","import * as React from 'react';\nimport attachEventListeners from './logic/attachEventListeners';\nimport transformToNestObject from './logic/transformToNestObject';\nimport focusOnErrorField from './logic/focusOnErrorField';\nimport findRemovedFieldAndRemoveListener from './logic/findRemovedFieldAndRemoveListener';\nimport setFieldArrayDirtyFields from './logic/setFieldArrayDirtyFields';\nimport getFieldsValues from './logic/getFieldsValues';\nimport getFieldValue from './logic/getFieldValue';\nimport isErrorStateChanged from './logic/isErrorStateChanged';\nimport validateField from './logic/validateField';\nimport assignWatchFields from './logic/assignWatchFields';\nimport skipValidation from './logic/skipValidation';\nimport getNodeParentName from './logic/getNodeParentName';\nimport deepEqual from './utils/deepEqual';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport isCheckBoxInput from './utils/isCheckBoxInput';\nimport isEmptyObject from './utils/isEmptyObject';\nimport isRadioInput from './utils/isRadioInput';\nimport isSelectInput from './utils/isSelectInput';\nimport isFileInput from './utils/isFileInput';\nimport onDomRemove from './utils/onDomRemove';\nimport isObject from './utils/isObject';\nimport { getPath } from './utils/getPath';\nimport isPrimitive from './utils/isPrimitive';\nimport isFunction from './utils/isFunction';\nimport isString from './utils/isString';\nimport isUndefined from './utils/isUndefined';\nimport get from './utils/get';\nimport set from './utils/set';\nimport unset from './utils/unset';\nimport isKey from './utils/isKey';\nimport cloneObject from './utils/cloneObject';\nimport modeChecker from './utils/validationModeChecker';\nimport isMultipleSelect from './utils/isMultipleSelect';\nimport compact from './utils/compact';\nimport isNullOrUndefined from './utils/isNullOrUndefined';\nimport isRadioOrCheckboxFunction from './utils/isRadioOrCheckbox';\nimport isWeb from './utils/isWeb';\nimport isHTMLElement from './utils/isHTMLElement';\nimport { EVENTS, UNDEFINED, VALIDATION_MODE } from './constants';\nimport {\n  UseFormMethods,\n  FieldValues,\n  UnpackNestedValue,\n  FieldName,\n  InternalFieldName,\n  FieldErrors,\n  Field,\n  FieldRefs,\n  UseFormOptions,\n  RegisterOptions,\n  SubmitHandler,\n  FieldElement,\n  FormStateProxy,\n  ReadFormState,\n  Ref,\n  HandleChange,\n  RadioOrCheckboxOption,\n  OmitResetState,\n  SetValueConfig,\n  ErrorOption,\n  FormState,\n  SubmitErrorHandler,\n  FieldNamesMarkedBoolean,\n  LiteralToPrimitive,\n  DeepPartial,\n  InternalNameSet,\n  DefaultValues,\n  FieldError,\n  SetFieldValue,\n  FieldArrayDefaultValues,\n  ResetFieldArrayFunctionRef,\n  UseWatchRenderFunctions,\n  RecordInternalNameSet,\n} from './types';\n\nconst isWindowUndefined = typeof window === UNDEFINED;\nconst isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== UNDEFINED;\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object\n>({\n  mode = VALIDATION_MODE.onSubmit,\n  reValidateMode = VALIDATION_MODE.onChange,\n  resolver,\n  context,\n  defaultValues = {} as DefaultValues<TFieldValues>,\n  shouldFocusError = true,\n  shouldUnregister = true,\n  criteriaMode,\n}: UseFormOptions<TFieldValues, TContext> = {}): UseFormMethods<TFieldValues> {\n  const fieldsRef = React.useRef<FieldRefs<TFieldValues>>({});\n  const fieldArrayDefaultValuesRef = React.useRef<FieldArrayDefaultValues>({});\n  const fieldArrayValuesRef = React.useRef<FieldArrayDefaultValues>({});\n  const watchFieldsRef = React.useRef<InternalNameSet<TFieldValues>>(new Set());\n  const useWatchFieldsRef = React.useRef<RecordInternalNameSet<TFieldValues>>(\n    {},\n  );\n  const useWatchRenderFunctionsRef = React.useRef<UseWatchRenderFunctions>({});\n  const fieldsWithValidationRef = React.useRef<\n    FieldNamesMarkedBoolean<TFieldValues>\n  >({});\n  const validFieldsRef = React.useRef<FieldNamesMarkedBoolean<TFieldValues>>(\n    {},\n  );\n  const defaultValuesRef = React.useRef<DefaultValues<TFieldValues>>(\n    defaultValues,\n  );\n  const defaultValuesAtRenderRef = React.useRef<\n    Partial<DefaultValues<TFieldValues>>\n  >({});\n  const isUnMount = React.useRef(false);\n  const isWatchAllRef = React.useRef(false);\n  const handleChangeRef = React.useRef<HandleChange>();\n  const shallowFieldsStateRef = React.useRef({});\n  const resetFieldArrayFunctionRef = React.useRef<\n    ResetFieldArrayFunctionRef<TFieldValues>\n  >({});\n  const contextRef = React.useRef(context);\n  const resolverRef = React.useRef(resolver);\n  const fieldArrayNamesRef = React.useRef<InternalNameSet<TFieldValues>>(\n    new Set(),\n  );\n  const modeRef = React.useRef(modeChecker(mode));\n  const { isOnSubmit, isOnTouch } = modeRef.current;\n  const isValidateAllFieldCriteria = criteriaMode === VALIDATION_MODE.all;\n  const [formState, setFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touched: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: !isOnSubmit,\n    errors: {},\n  });\n  const readFormStateRef = React.useRef<ReadFormState>({\n    isDirty: !isProxyEnabled,\n    dirtyFields: !isProxyEnabled,\n    touched: !isProxyEnabled || isOnTouch,\n    isSubmitting: !isProxyEnabled,\n    isValid: !isProxyEnabled,\n  });\n  const formStateRef = React.useRef(formState);\n  const observerRef = React.useRef<MutationObserver | undefined>();\n  const {\n    isOnBlur: isReValidateOnBlur,\n    isOnChange: isReValidateOnChange,\n  } = React.useRef(modeChecker(reValidateMode)).current;\n\n  contextRef.current = context;\n  resolverRef.current = resolver;\n  formStateRef.current = formState;\n  shallowFieldsStateRef.current = shouldUnregister\n    ? {}\n    : isEmptyObject(shallowFieldsStateRef.current)\n    ? cloneObject(defaultValues)\n    : shallowFieldsStateRef.current;\n\n  const updateFormState = React.useCallback(\n    (state: Partial<FormState<TFieldValues>> = {}) => {\n      if (!isUnMount.current) {\n        formStateRef.current = {\n          ...formStateRef.current,\n          ...state,\n        };\n        setFormState(formStateRef.current);\n      }\n    },\n    [],\n  );\n\n  const shouldRenderBaseOnError = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      error: FieldError | undefined,\n      shouldRender: boolean | null = false,\n      state: {\n        dirtyFields?: FieldNamesMarkedBoolean<TFieldValues>;\n        isDirty?: boolean;\n        touched?: FieldNamesMarkedBoolean<TFieldValues>;\n      } = {},\n      isValid?: boolean,\n    ): boolean | void => {\n      let shouldReRender =\n        shouldRender ||\n        isErrorStateChanged<TFieldValues>({\n          errors: formStateRef.current.errors,\n          error,\n          name,\n          validFields: validFieldsRef.current,\n          fieldsWithValidation: fieldsWithValidationRef.current,\n        });\n      const previousError = get(formStateRef.current.errors, name);\n\n      if (error) {\n        unset(validFieldsRef.current, name);\n        shouldReRender =\n          shouldReRender ||\n          !previousError ||\n          !deepEqual(previousError, error, true);\n        set(formStateRef.current.errors, name, error);\n      } else {\n        if (get(fieldsWithValidationRef.current, name) || resolverRef.current) {\n          set(validFieldsRef.current, name, true);\n          shouldReRender = shouldReRender || previousError;\n        }\n\n        unset(formStateRef.current.errors, name);\n      }\n\n      if (\n        (shouldReRender && !isNullOrUndefined(shouldRender)) ||\n        !isEmptyObject(state)\n      ) {\n        updateFormState({\n          ...state,\n          ...(resolverRef.current ? { isValid: !!isValid } : {}),\n        });\n      }\n    },\n    [],\n  );\n\n  const setFieldValue = React.useCallback(\n    (name: FieldName<TFieldValues>, rawValue: SetFieldValue<TFieldValues>) => {\n      const { ref, options } = fieldsRef.current[name] as Field;\n      const value =\n        isWeb && isHTMLElement(ref) && isNullOrUndefined(rawValue)\n          ? ''\n          : rawValue;\n\n      if (isRadioInput(ref)) {\n        (options || []).forEach(\n          ({ ref: radioRef }: { ref: HTMLInputElement }) =>\n            (radioRef.checked = radioRef.value === value),\n        );\n      } else if (isFileInput(ref) && !isString(value)) {\n        ref.files = value as FileList;\n      } else if (isMultipleSelect(ref)) {\n        [...ref.options].forEach(\n          (selectRef) =>\n            (selectRef.selected = (value as string[]).includes(\n              selectRef.value,\n            )),\n        );\n      } else if (isCheckBoxInput(ref) && options) {\n        options.length > 1\n          ? options.forEach(\n              ({ ref: checkboxRef }) =>\n                (checkboxRef.checked = Array.isArray(value)\n                  ? !!(value as []).find(\n                      (data: string) => data === checkboxRef.value,\n                    )\n                  : value === checkboxRef.value),\n            )\n          : (options[0].ref.checked = !!value);\n      } else {\n        ref.value = value;\n      }\n    },\n    [],\n  );\n\n  const isFormDirty = React.useCallback(\n    (name?: string, data?: unknown[]): boolean => {\n      if (readFormStateRef.current.isDirty) {\n        const formValues = getValues();\n\n        name && data && set(formValues, name, data);\n\n        return !deepEqual(\n          formValues,\n          isEmptyObject(defaultValuesRef.current)\n            ? defaultValuesAtRenderRef.current\n            : defaultValuesRef.current,\n        );\n      }\n\n      return false;\n    },\n    [],\n  );\n\n  const updateAndGetDirtyState = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      shouldRender = true,\n    ): Partial<\n      Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touched'>\n    > => {\n      if (\n        readFormStateRef.current.isDirty ||\n        readFormStateRef.current.dirtyFields\n      ) {\n        const isFieldDirty = !deepEqual(\n          get(defaultValuesAtRenderRef.current, name),\n          getFieldValue(fieldsRef, name, shallowFieldsStateRef),\n        );\n        const isDirtyFieldExist = get(formStateRef.current.dirtyFields, name);\n        const previousIsDirty = formStateRef.current.isDirty;\n\n        isFieldDirty\n          ? set(formStateRef.current.dirtyFields, name, true)\n          : unset(formStateRef.current.dirtyFields, name);\n\n        const state = {\n          isDirty: isFormDirty(),\n          dirtyFields: formStateRef.current.dirtyFields,\n        };\n\n        const isChanged =\n          (readFormStateRef.current.isDirty &&\n            previousIsDirty !== state.isDirty) ||\n          (readFormStateRef.current.dirtyFields &&\n            isDirtyFieldExist !== get(formStateRef.current.dirtyFields, name));\n\n        isChanged && shouldRender && updateFormState(state);\n\n        return isChanged ? state : {};\n      }\n\n      return {};\n    },\n    [],\n  );\n\n  const executeValidation = React.useCallback(\n    async (\n      name: InternalFieldName<TFieldValues>,\n      skipReRender?: boolean | null,\n    ): Promise<boolean> => {\n      if (process.env.NODE_ENV !== 'production') {\n        if (!fieldsRef.current[name]) {\n          console.warn('📋 Field is missing with `name` attribute: ', name);\n          return false;\n        }\n      }\n\n      const error = (\n        await validateField<TFieldValues>(\n          fieldsRef,\n          isValidateAllFieldCriteria,\n          fieldsRef.current[name] as Field,\n          shallowFieldsStateRef,\n        )\n      )[name];\n\n      shouldRenderBaseOnError(name, error, skipReRender);\n\n      return isUndefined(error);\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const executeSchemaOrResolverValidation = React.useCallback(\n    async (\n      names:\n        | InternalFieldName<TFieldValues>\n        | InternalFieldName<TFieldValues>[],\n    ) => {\n      const { errors } = await resolverRef.current!(\n        getValues(),\n        contextRef.current,\n        isValidateAllFieldCriteria,\n      );\n      const previousFormIsValid = formStateRef.current.isValid;\n\n      if (Array.isArray(names)) {\n        const isInputsValid = names\n          .map((name) => {\n            const error = get(errors, name);\n\n            error\n              ? set(formStateRef.current.errors, name, error)\n              : unset(formStateRef.current.errors, name);\n\n            return !error;\n          })\n          .every(Boolean);\n\n        updateFormState({\n          isValid: isEmptyObject(errors),\n        });\n\n        return isInputsValid;\n      } else {\n        const error = get(errors, names);\n\n        shouldRenderBaseOnError(\n          names,\n          error,\n          previousFormIsValid !== isEmptyObject(errors),\n          {},\n          isEmptyObject(errors),\n        );\n\n        return !error;\n      }\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const trigger = React.useCallback(\n    async (\n      name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n    ): Promise<boolean> => {\n      const fields = name || Object.keys(fieldsRef.current);\n\n      if (resolverRef.current) {\n        return executeSchemaOrResolverValidation(fields);\n      }\n\n      if (Array.isArray(fields)) {\n        !name && (formStateRef.current.errors = {});\n        const result = await Promise.all(\n          fields.map(async (data) => await executeValidation(data, null)),\n        );\n        updateFormState();\n        return result.every(Boolean);\n      }\n\n      return await executeValidation(fields);\n    },\n    [executeSchemaOrResolverValidation, executeValidation],\n  );\n\n  const setInternalValues = React.useCallback(\n    (\n      name: FieldName<TFieldValues>,\n      value: SetFieldValue<TFieldValues>,\n      { shouldDirty, shouldValidate }: SetValueConfig,\n    ) => {\n      const data = {};\n      set(data, name, value);\n\n      for (const fieldName of getPath(name, value)) {\n        if (fieldsRef.current[fieldName]) {\n          setFieldValue(fieldName, get(data, fieldName));\n          shouldDirty && updateAndGetDirtyState(fieldName);\n          shouldValidate && trigger(fieldName as FieldName<TFieldValues>);\n        }\n      }\n    },\n    [trigger, setFieldValue, updateAndGetDirtyState],\n  );\n\n  const setInternalValue = React.useCallback(\n    (\n      name: FieldName<TFieldValues>,\n      value: SetFieldValue<TFieldValues>,\n      config: SetValueConfig,\n    ) => {\n      !isPrimitive(value) && set(shallowFieldsStateRef.current, name, value);\n\n      if (fieldsRef.current[name]) {\n        setFieldValue(name, value);\n        config.shouldDirty && updateAndGetDirtyState(name);\n        config.shouldValidate && trigger(name as any);\n      } else if (!isPrimitive(value)) {\n        setInternalValues(name, value, config);\n\n        if (fieldArrayNamesRef.current.has(name)) {\n          fieldArrayDefaultValuesRef.current[name] = value;\n          resetFieldArrayFunctionRef.current[name]({\n            [name]: value,\n          } as UnpackNestedValue<DeepPartial<TFieldValues>>);\n\n          if (\n            (readFormStateRef.current.isDirty ||\n              readFormStateRef.current.dirtyFields) &&\n            config.shouldDirty\n          ) {\n            set(\n              formStateRef.current.dirtyFields,\n              name,\n              setFieldArrayDirtyFields(\n                value,\n                get(defaultValuesRef.current, name, []),\n                get(formStateRef.current.dirtyFields, name, []),\n              ),\n            );\n\n            updateFormState({\n              isDirty: !deepEqual(\n                { ...getValues(), [name]: value },\n                defaultValuesRef.current,\n              ),\n            });\n          }\n        }\n      }\n\n      !shouldUnregister && set(shallowFieldsStateRef.current, name, value);\n    },\n    [updateAndGetDirtyState, setFieldValue, setInternalValues],\n  );\n\n  const isFieldWatched = <T extends FieldName<TFieldValues>>(name: T) =>\n    isWatchAllRef.current ||\n    watchFieldsRef.current.has(name) ||\n    watchFieldsRef.current.has((name.match(/\\w+/) || [])[0]);\n\n  const renderWatchedInputs = <T extends FieldName<FieldValues>>(\n    name: T,\n    found = true,\n  ): boolean => {\n    if (!isEmptyObject(useWatchFieldsRef.current)) {\n      for (const key in useWatchFieldsRef.current) {\n        if (\n          !name ||\n          !useWatchFieldsRef.current[key].size ||\n          useWatchFieldsRef.current[key].has(name) ||\n          useWatchFieldsRef.current[key].has(getNodeParentName(name))\n        ) {\n          useWatchRenderFunctionsRef.current[key]();\n          found = false;\n        }\n      }\n    }\n\n    return found;\n  };\n\n  function setValue(\n    name: FieldName<TFieldValues>,\n    value: SetFieldValue<TFieldValues>,\n    config?: SetValueConfig,\n  ): void {\n    setInternalValue(name, value, config || {});\n    isFieldWatched(name) && updateFormState();\n    renderWatchedInputs(name);\n  }\n\n  handleChangeRef.current = handleChangeRef.current\n    ? handleChangeRef.current\n    : async ({ type, target }: Event): Promise<void | boolean> => {\n        let name = (target as Ref)!.name;\n        const field = fieldsRef.current[name];\n        let error;\n        let isValid;\n\n        if (field) {\n          const isBlurEvent = type === EVENTS.BLUR;\n          const shouldSkipValidation = skipValidation({\n            isBlurEvent,\n            isReValidateOnChange,\n            isReValidateOnBlur,\n            isTouched: !!get(formStateRef.current.touched, name),\n            isSubmitted: formStateRef.current.isSubmitted,\n            ...modeRef.current,\n          });\n          let state = updateAndGetDirtyState(name, false);\n          let shouldRender =\n            !isEmptyObject(state) ||\n            isFieldWatched(name as FieldName<TFieldValues>);\n\n          if (\n            isBlurEvent &&\n            !get(formStateRef.current.touched, name) &&\n            readFormStateRef.current.touched\n          ) {\n            set(formStateRef.current.touched, name, true);\n            state = {\n              ...state,\n              touched: formStateRef.current.touched,\n            };\n          }\n\n          if (!shouldUnregister && isCheckBoxInput(target as Ref)) {\n            set(\n              shallowFieldsStateRef.current,\n              name,\n              getFieldValue(fieldsRef, name),\n            );\n          }\n\n          if (shouldSkipValidation) {\n            renderWatchedInputs(name);\n            return (\n              (!isEmptyObject(state) ||\n                (shouldRender && isEmptyObject(state))) &&\n              updateFormState(state)\n            );\n          }\n\n          if (resolverRef.current) {\n            const { errors } = await resolverRef.current(\n              getValues(),\n              contextRef.current,\n              isValidateAllFieldCriteria,\n            );\n            const previousFormIsValid = formStateRef.current.isValid;\n            error = get(errors, name);\n\n            if (\n              isCheckBoxInput(target as Ref) &&\n              !error &&\n              resolverRef.current\n            ) {\n              const parentNodeName = getNodeParentName(name);\n              const currentError = get(errors, parentNodeName, {});\n              currentError.type &&\n                currentError.message &&\n                (error = currentError);\n\n              if (\n                parentNodeName &&\n                (currentError ||\n                  get(formStateRef.current.errors, parentNodeName))\n              ) {\n                name = parentNodeName;\n              }\n            }\n\n            isValid = isEmptyObject(errors);\n\n            previousFormIsValid !== isValid && (shouldRender = true);\n          } else {\n            error = (\n              await validateField<TFieldValues>(\n                fieldsRef,\n                isValidateAllFieldCriteria,\n                field,\n                shallowFieldsStateRef,\n              )\n            )[name];\n          }\n\n          renderWatchedInputs(name);\n          shouldRenderBaseOnError(name, error, shouldRender, state, isValid);\n        }\n      };\n\n  function setFieldArrayDefaultValues<T extends FieldValues>(data: T): T {\n    if (!shouldUnregister) {\n      let copy = cloneObject(data);\n\n      for (const value of fieldArrayNamesRef.current) {\n        if (isKey(value) && !copy[value]) {\n          copy = {\n            ...copy,\n            [value]: [],\n          };\n        }\n      }\n\n      return copy;\n    }\n    return data;\n  }\n\n  function getValues(): UnpackNestedValue<TFieldValues>;\n  function getValues<TFieldName extends string, TFieldValue extends unknown>(\n    name: TFieldName,\n  ): TFieldName extends keyof TFieldValues\n    ? UnpackNestedValue<TFieldValues>[TFieldName]\n    : TFieldValue;\n  function getValues<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function getValues(payload?: string | string[]): unknown {\n    if (isString(payload)) {\n      return getFieldValue(fieldsRef, payload, shallowFieldsStateRef);\n    }\n\n    if (Array.isArray(payload)) {\n      const data = {};\n\n      for (const name of payload) {\n        set(data, name, getFieldValue(fieldsRef, name, shallowFieldsStateRef));\n      }\n\n      return data;\n    }\n\n    return setFieldArrayDefaultValues(\n      getFieldsValues(\n        fieldsRef,\n        cloneObject(shallowFieldsStateRef.current),\n        shouldUnregister,\n      ),\n    );\n  }\n\n  const validateResolver = React.useCallback(\n    async (values = {}) => {\n      const { errors } = await resolverRef.current!(\n        {\n          ...getValues(),\n          ...values,\n        },\n        contextRef.current,\n        isValidateAllFieldCriteria,\n      );\n      const isValid = isEmptyObject(errors);\n\n      formStateRef.current.isValid !== isValid &&\n        updateFormState({\n          isValid,\n        });\n    },\n    [isValidateAllFieldCriteria],\n  );\n\n  const removeFieldEventListener = React.useCallback(\n    (field: Field, forceDelete?: boolean) =>\n      findRemovedFieldAndRemoveListener(\n        fieldsRef,\n        handleChangeRef.current!,\n        field,\n        shallowFieldsStateRef,\n        shouldUnregister,\n        forceDelete,\n      ),\n    [shouldUnregister],\n  );\n\n  const updateWatchedValue = React.useCallback((name: string) => {\n    if (isWatchAllRef.current) {\n      updateFormState();\n    } else {\n      for (const watchField of watchFieldsRef.current) {\n        if (watchField.startsWith(name)) {\n          updateFormState();\n          break;\n        }\n      }\n\n      renderWatchedInputs(name);\n    }\n  }, []);\n\n  const removeFieldEventListenerAndRef = React.useCallback(\n    (field?: Field, forceDelete?: boolean) => {\n      if (field) {\n        removeFieldEventListener(field, forceDelete);\n\n        if (shouldUnregister && !compact(field.options || []).length) {\n          unset(defaultValuesAtRenderRef.current, field.ref.name);\n          unset(validFieldsRef.current, field.ref.name);\n          unset(fieldsWithValidationRef.current, field.ref.name);\n          unset(formStateRef.current.errors, field.ref.name);\n          set(formStateRef.current.dirtyFields, field.ref.name, true);\n\n          updateFormState({\n            isDirty: isFormDirty(),\n          });\n\n          readFormStateRef.current.isValid &&\n            resolverRef.current &&\n            validateResolver();\n          updateWatchedValue(field.ref.name);\n        }\n      }\n    },\n    [validateResolver, removeFieldEventListener],\n  );\n\n  function clearErrors(\n    name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    name &&\n      (Array.isArray(name) ? name : [name]).forEach((inputName) =>\n        fieldsRef.current[inputName] && isKey(inputName)\n          ? delete formStateRef.current.errors[inputName]\n          : unset(formStateRef.current.errors, inputName),\n      );\n\n    updateFormState({\n      errors: name ? formStateRef.current.errors : {},\n    });\n  }\n\n  function setError(name: FieldName<TFieldValues>, error: ErrorOption) {\n    const ref = (fieldsRef.current[name] || {})!.ref;\n\n    set(formStateRef.current.errors, name, {\n      ...error,\n      ref,\n    });\n\n    updateFormState({\n      isValid: false,\n    });\n\n    error.shouldFocus && ref && ref.focus && ref.focus();\n  }\n\n  const watchInternal = React.useCallback(\n    <T>(fieldNames?: string | string[], defaultValue?: T, watchId?: string) => {\n      const watchFields = watchId\n        ? useWatchFieldsRef.current[watchId]\n        : watchFieldsRef.current;\n      let fieldValues = getFieldsValues<TFieldValues>(\n        fieldsRef,\n        cloneObject(shallowFieldsStateRef.current),\n        shouldUnregister,\n        false,\n        fieldNames,\n      );\n\n      if (isString(fieldNames)) {\n        if (fieldArrayNamesRef.current.has(fieldNames)) {\n          const fieldArrayValue = get(\n            fieldArrayValuesRef.current,\n            fieldNames,\n            [],\n          );\n          fieldValues =\n            !fieldArrayValue.length ||\n            fieldArrayValue.length !==\n              compact(get(fieldValues, fieldNames, [])).length\n              ? fieldArrayValuesRef.current\n              : fieldValues;\n        }\n\n        return assignWatchFields<TFieldValues>(\n          fieldValues,\n          fieldNames,\n          watchFields,\n          isUndefined(get(defaultValuesRef.current, fieldNames))\n            ? defaultValue\n            : get(defaultValuesRef.current, fieldNames),\n          true,\n        );\n      }\n\n      const combinedDefaultValues = isUndefined(defaultValue)\n        ? defaultValuesRef.current\n        : defaultValue;\n\n      if (Array.isArray(fieldNames)) {\n        return fieldNames.reduce(\n          (previous, name) => ({\n            ...previous,\n            [name]: assignWatchFields<TFieldValues>(\n              fieldValues,\n              name,\n              watchFields,\n              combinedDefaultValues as UnpackNestedValue<\n                DeepPartial<TFieldValues>\n              >,\n            ),\n          }),\n          {},\n        );\n      }\n\n      isWatchAllRef.current = isUndefined(watchId);\n\n      return transformToNestObject(\n        (!isEmptyObject(fieldValues) && fieldValues) ||\n          (combinedDefaultValues as FieldValues),\n      );\n    },\n    [],\n  );\n\n  function watch(): UnpackNestedValue<TFieldValues>;\n  function watch<\n    TFieldName extends string,\n    TFieldValue extends TFieldValues[TFieldName]\n  >(\n    name: TFieldName,\n    defaultValue?: UnpackNestedValue<LiteralToPrimitive<TFieldValue>>,\n  ): UnpackNestedValue<LiteralToPrimitive<TFieldValue>>;\n  function watch<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n    defaultValues?: UnpackNestedValue<\n      DeepPartial<Pick<TFieldValues, TFieldName>>\n    >,\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function watch(\n    names: string[],\n    defaultValues?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  ): UnpackNestedValue<DeepPartial<TFieldValues>>;\n  function watch(\n    fieldNames?: string | string[],\n    defaultValue?: unknown,\n  ): unknown {\n    return watchInternal(fieldNames, defaultValue);\n  }\n\n  function unregister(\n    name: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    for (const fieldName of Array.isArray(name) ? name : [name]) {\n      removeFieldEventListenerAndRef(fieldsRef.current[fieldName], true);\n    }\n  }\n\n  function registerFieldRef<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: TFieldElement & Ref,\n    options: RegisterOptions | null = {},\n  ): ((name: InternalFieldName<TFieldValues>) => void) | void {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!ref.name) {\n        return console.warn(\n          '📋 Field is missing `name` attribute',\n          ref,\n          `https://react-hook-form.com/api#useForm`,\n        );\n      }\n\n      if (\n        fieldArrayNamesRef.current.has(ref.name.split(/\\[\\d+\\]$/)[0]) &&\n        !RegExp(\n          `^${ref.name.split(/\\[\\d+\\]$/)[0]}[\\\\d+].\\\\w+`\n            .replace(/\\[/g, '\\\\[')\n            .replace(/\\]/g, '\\\\]'),\n        ).test(ref.name)\n      ) {\n        return console.warn(\n          '📋 `name` prop should be in object shape: name=\"test[index].name\"',\n          ref,\n          'https://react-hook-form.com/api#useFieldArray',\n        );\n      }\n    }\n\n    const { name, type, value } = ref;\n    const fieldRefAndValidationOptions = {\n      ref,\n      ...options,\n    };\n    const fields = fieldsRef.current;\n    const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n    const isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n    const compareRef = (currentRef: Ref) =>\n      isWeb && (!isHTMLElement(ref) || currentRef === ref);\n    let field = fields[name] as Field;\n    let isEmptyDefaultValue = true;\n    let defaultValue;\n\n    if (\n      field &&\n      (isRadioOrCheckbox\n        ? Array.isArray(field.options) &&\n          compact(field.options).find((option) => {\n            return value === option.ref.value && compareRef(option.ref);\n          })\n        : compareRef(field.ref))\n    ) {\n      fields[name] = {\n        ...field,\n        ...options,\n      };\n      return;\n    }\n\n    if (type) {\n      field = isRadioOrCheckbox\n        ? {\n            options: [\n              ...compact((field && field.options) || []),\n              {\n                ref,\n              } as RadioOrCheckboxOption,\n            ],\n            ref: { type, name },\n            ...options,\n          }\n        : {\n            ...fieldRefAndValidationOptions,\n          };\n    } else {\n      field = fieldRefAndValidationOptions;\n    }\n\n    fields[name] = field;\n\n    const isEmptyUnmountFields = isUndefined(\n      get(shallowFieldsStateRef.current, name),\n    );\n\n    if (!isEmptyObject(defaultValuesRef.current) || !isEmptyUnmountFields) {\n      defaultValue = get(\n        isEmptyUnmountFields\n          ? defaultValuesRef.current\n          : shallowFieldsStateRef.current,\n        name,\n      );\n      isEmptyDefaultValue = isUndefined(defaultValue);\n\n      if (!isEmptyDefaultValue && !isFieldArray) {\n        setFieldValue(name as FieldName<TFieldValues>, defaultValue);\n      }\n    }\n\n    if (!isEmptyObject(options)) {\n      set(fieldsWithValidationRef.current, name, true);\n\n      if (!isOnSubmit && readFormStateRef.current.isValid) {\n        validateField(\n          fieldsRef,\n          isValidateAllFieldCriteria,\n          field,\n          shallowFieldsStateRef,\n        ).then((error: FieldErrors) => {\n          const previousFormIsValid = formStateRef.current.isValid;\n\n          isEmptyObject(error)\n            ? set(validFieldsRef.current, name, true)\n            : unset(validFieldsRef.current, name);\n\n          previousFormIsValid !== isEmptyObject(error) && updateFormState();\n        });\n      }\n    }\n\n    if (\n      !defaultValuesAtRenderRef.current[name] &&\n      !(isFieldArray && isEmptyDefaultValue)\n    ) {\n      const fieldValue = getFieldValue(fieldsRef, name, shallowFieldsStateRef);\n      set(\n        defaultValuesAtRenderRef.current,\n        name,\n        isEmptyDefaultValue\n          ? isObject(fieldValue)\n            ? { ...fieldValue }\n            : fieldValue\n          : defaultValue,\n      );\n      !isFieldArray && unset(formStateRef.current.dirtyFields, name);\n    }\n\n    if (type) {\n      attachEventListeners(\n        isRadioOrCheckbox && field.options\n          ? field.options[field.options.length - 1]\n          : field,\n        isRadioOrCheckbox || isSelectInput(ref),\n        handleChangeRef.current,\n      );\n    }\n  }\n\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    options?: RegisterOptions,\n  ): (ref: (TFieldElement & Ref) | null) => void;\n  function register(\n    name: FieldName<TFieldValues>,\n    options?: RegisterOptions,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: (TFieldElement & Ref) | null,\n    options?: RegisterOptions,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    refOrRegisterOptions?:\n      | FieldName<TFieldValues>\n      | RegisterOptions\n      | (TFieldElement & Ref)\n      | null,\n    options?: RegisterOptions,\n  ): ((ref: (TFieldElement & Ref) | null) => void) | void {\n    if (!isWindowUndefined) {\n      if (isString(refOrRegisterOptions)) {\n        registerFieldRef({ name: refOrRegisterOptions }, options);\n      } else if (\n        isObject(refOrRegisterOptions) &&\n        'name' in refOrRegisterOptions\n      ) {\n        registerFieldRef(refOrRegisterOptions, options);\n      } else {\n        return (ref: (TFieldElement & Ref) | null) =>\n          ref && registerFieldRef(ref, refOrRegisterOptions);\n      }\n    }\n  }\n\n  const handleSubmit = React.useCallback(\n    <TSubmitFieldValues extends FieldValues = TFieldValues>(\n      onValid: SubmitHandler<TSubmitFieldValues>,\n      onInvalid?: SubmitErrorHandler<TFieldValues>,\n    ) => async (e?: React.BaseSyntheticEvent): Promise<void> => {\n      if (e && e.preventDefault) {\n        e.preventDefault();\n        e.persist();\n      }\n      let fieldErrors: FieldErrors<TFieldValues> = {};\n      let fieldValues = setFieldArrayDefaultValues(\n        getFieldsValues(\n          fieldsRef,\n          cloneObject(shallowFieldsStateRef.current),\n          shouldUnregister,\n          true,\n        ),\n      );\n\n      readFormStateRef.current.isSubmitting &&\n        updateFormState({\n          isSubmitting: true,\n        });\n\n      try {\n        if (resolverRef.current) {\n          const { errors, values } = await resolverRef.current(\n            fieldValues,\n            contextRef.current,\n            isValidateAllFieldCriteria,\n          );\n          formStateRef.current.errors = fieldErrors = errors;\n          fieldValues = values;\n        } else {\n          for (const field of Object.values(fieldsRef.current)) {\n            if (field) {\n              const { name } = field.ref;\n\n              const fieldError = await validateField(\n                fieldsRef,\n                isValidateAllFieldCriteria,\n                field,\n                shallowFieldsStateRef,\n              );\n\n              if (fieldError[name]) {\n                set(fieldErrors, name, fieldError[name]);\n                unset(validFieldsRef.current, name);\n              } else if (get(fieldsWithValidationRef.current, name)) {\n                unset(formStateRef.current.errors, name);\n                set(validFieldsRef.current, name, true);\n              }\n            }\n          }\n        }\n\n        if (\n          isEmptyObject(fieldErrors) &&\n          Object.keys(formStateRef.current.errors).every(\n            (name) => name in fieldsRef.current,\n          )\n        ) {\n          updateFormState({\n            errors: {},\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          formStateRef.current.errors = {\n            ...formStateRef.current.errors,\n            ...fieldErrors,\n          };\n          onInvalid && (await onInvalid(formStateRef.current.errors, e));\n          shouldFocusError &&\n            focusOnErrorField(fieldsRef.current, formStateRef.current.errors);\n        }\n      } finally {\n        formStateRef.current.isSubmitting = false;\n        updateFormState({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful: isEmptyObject(formStateRef.current.errors),\n          submitCount: formStateRef.current.submitCount + 1,\n        });\n      }\n    },\n    [shouldFocusError, isValidateAllFieldCriteria],\n  );\n\n  const resetRefs = ({\n    errors,\n    isDirty,\n    isSubmitted,\n    touched,\n    isValid,\n    submitCount,\n    dirtyFields,\n  }: OmitResetState) => {\n    if (!isValid) {\n      validFieldsRef.current = {};\n      fieldsWithValidationRef.current = {};\n    }\n\n    defaultValuesAtRenderRef.current = {};\n    fieldArrayDefaultValuesRef.current = {};\n    watchFieldsRef.current = new Set();\n    isWatchAllRef.current = false;\n\n    updateFormState({\n      submitCount: submitCount ? formStateRef.current.submitCount : 0,\n      isDirty: isDirty ? formStateRef.current.isDirty : false,\n      isSubmitted: isSubmitted ? formStateRef.current.isSubmitted : false,\n      isValid: isValid ? formStateRef.current.isValid : false,\n      dirtyFields: dirtyFields ? formStateRef.current.dirtyFields : {},\n      touched: touched ? formStateRef.current.touched : {},\n      errors: errors ? formStateRef.current.errors : {},\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n    });\n  };\n\n  const reset = (\n    values?: DefaultValues<TFieldValues>,\n    omitResetState: OmitResetState = {},\n  ): void => {\n    if (isWeb) {\n      for (const field of Object.values(fieldsRef.current)) {\n        if (field) {\n          const { ref, options } = field;\n          const inputRef =\n            isRadioOrCheckboxFunction(ref) && Array.isArray(options)\n              ? options[0].ref\n              : ref;\n\n          if (isHTMLElement(inputRef)) {\n            try {\n              inputRef.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n    }\n\n    fieldsRef.current = {};\n    defaultValuesRef.current = cloneObject(values || defaultValuesRef.current);\n    values && renderWatchedInputs('');\n\n    Object.values(resetFieldArrayFunctionRef.current).forEach(\n      (resetFieldArray) => isFunction(resetFieldArray) && resetFieldArray(),\n    );\n\n    shallowFieldsStateRef.current = shouldUnregister\n      ? {}\n      : cloneObject(values) || {};\n\n    resetRefs(omitResetState);\n  };\n\n  React.useEffect(() => {\n    resolver && readFormStateRef.current.isValid && validateResolver();\n    observerRef.current =\n      observerRef.current || !isWeb\n        ? observerRef.current\n        : onDomRemove(fieldsRef, removeFieldEventListenerAndRef);\n  }, [removeFieldEventListenerAndRef, defaultValuesRef.current]);\n\n  React.useEffect(\n    () => () => {\n      observerRef.current && observerRef.current.disconnect();\n\n      if (process.env.NODE_ENV !== 'production') {\n        return;\n      }\n\n      isUnMount.current = true;\n      Object.values(fieldsRef.current).forEach((field) =>\n        removeFieldEventListenerAndRef(field, true),\n      );\n    },\n    [],\n  );\n\n  if (!resolver && readFormStateRef.current.isValid) {\n    formState.isValid =\n      deepEqual(validFieldsRef.current, fieldsWithValidationRef.current) &&\n      isEmptyObject(formStateRef.current.errors);\n  }\n\n  const commonProps = {\n    trigger,\n    setValue: React.useCallback(setValue, [setInternalValue, trigger]),\n    getValues: React.useCallback(getValues, []),\n    register: React.useCallback(register, [defaultValuesRef.current]),\n    unregister: React.useCallback(unregister, []),\n  };\n\n  const control = React.useMemo(\n    () => ({\n      isFormDirty,\n      updateWatchedValue,\n      shouldUnregister,\n      updateFormState,\n      removeFieldEventListener,\n      watchInternal,\n      mode: modeRef.current,\n      reValidateMode: {\n        isReValidateOnBlur,\n        isReValidateOnChange,\n      },\n      validateResolver: resolver ? validateResolver : undefined,\n      fieldsRef,\n      resetFieldArrayFunctionRef,\n      useWatchFieldsRef,\n      useWatchRenderFunctionsRef,\n      fieldArrayDefaultValuesRef,\n      validFieldsRef,\n      fieldsWithValidationRef,\n      fieldArrayNamesRef,\n      readFormStateRef,\n      formStateRef,\n      defaultValuesRef,\n      shallowFieldsStateRef,\n      fieldArrayValuesRef,\n      ...commonProps,\n    }),\n    [\n      defaultValuesRef.current,\n      updateWatchedValue,\n      shouldUnregister,\n      removeFieldEventListener,\n      watchInternal,\n    ],\n  );\n\n  return {\n    watch,\n    control,\n    formState: isProxyEnabled\n      ? new Proxy(formState, {\n          get: (obj, prop: keyof FormStateProxy) => {\n            if (process.env.NODE_ENV !== 'production') {\n              if (prop === 'isValid' && isOnSubmit) {\n                console.warn(\n                  '📋 `formState.isValid` is applicable with `onTouched`, `onChange` or `onBlur` mode. https://react-hook-form.com/api#formState',\n                );\n              }\n            }\n\n            if (prop in obj) {\n              readFormStateRef.current[prop] = true;\n              return obj[prop];\n            }\n\n            return undefined;\n          },\n        })\n      : formState,\n    handleSubmit,\n    reset: React.useCallback(reset, []),\n    clearErrors: React.useCallback(clearErrors, []),\n    setError: React.useCallback(setError, []),\n    errors: formState.errors,\n    ...commonProps,\n  };\n}\n","import * as React from 'react';\nimport { UseFormMethods, FieldValues, FormProviderProps } from './types';\n\nconst FormContext = React.createContext<UseFormMethods | null>(null);\n\nFormContext.displayName = 'RHFContext';\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues\n>(): UseFormMethods<TFieldValues> =>\n  React.useContext(FormContext) as UseFormMethods<TFieldValues>;\n\nexport const FormProvider = <TFieldValues extends FieldValues>({\n  children,\n  ...props\n}: FormProviderProps<TFieldValues>) => (\n  <FormContext.Provider value={{ ...props } as UseFormMethods}>\n    {children}\n  </FormContext.Provider>\n);\n","import { UNDEFINED } from '../constants';\n\nexport default () => {\n  const d =\n    typeof performance === UNDEFINED ? Date.now() : performance.now() * 1000;\n\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (Math.random() * 16 + d) % 16 | 0;\n\n    return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n  });\n};\n","import isUndefined from './isUndefined';\nimport compact from './compact';\n\nfunction removeAtIndexes<T>(data: T[], indexes: number[]): T[] {\n  let i = 0;\n  const temp = [...data];\n\n  for (const index of indexes) {\n    temp.splice(index - i, 1);\n    i++;\n  }\n\n  return compact(temp).length ? temp : [];\n}\n\nexport default <T>(data: T[], index?: number | number[]): T[] =>\n  isUndefined(index)\n    ? []\n    : removeAtIndexes(data, (Array.isArray(index) ? index : [index]).sort());\n","import isUndefined from './isUndefined';\n\nexport default <T>(\n  data: (T | undefined)[],\n  from: number,\n  to: number,\n): (T | undefined)[] => {\n  if (Array.isArray(data)) {\n    if (isUndefined(data[to])) {\n      data[to] = undefined;\n    }\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n  }\n\n  return [];\n};\n","export default <T>(data: T[], indexA: number, indexB: number): void => {\n  const temp = [data[indexB], data[indexA]];\n  data[indexA] = temp[0];\n  data[indexB] = temp[1];\n};\n","export default function prepend<T>(data: T[]): (T | undefined)[];\nexport default function prepend<T>(data: T[], value: T | T[]): T[];\nexport default function prepend<T>(\n  data: T[],\n  value?: T | T[],\n): (T | undefined)[] {\n  return [...(Array.isArray(value) ? value : [value || undefined]), ...data];\n}\n","export default function insert<T>(data: T[], index: number): (T | undefined)[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value: T | T[],\n): T[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value?: T | T[],\n): (T | undefined)[] {\n  return [\n    ...data.slice(0, index),\n    ...(Array.isArray(value) ? value : [value || undefined]),\n    ...data.slice(index),\n  ];\n}\n","export default <T>(value: T | T[]): undefined[] | undefined =>\n  Array.isArray(value) ? Array(value.length).fill(undefined) : undefined;\n","import isObject from './isObject';\n\nexport default <T>(value: T) =>\n  ((Array.isArray(value) ? value : [value]) as T[]).map((data) => {\n    if (isObject(data)) {\n      const object: Record<string, boolean> = {};\n\n      for (const key in data) {\n        object[key] = true;\n      }\n\n      return object;\n    }\n\n    return true;\n  });\n","import * as React from 'react';\nimport { useFormContext } from './useFormContext';\nimport setFieldArrayDirtyFields from './logic/setFieldArrayDirtyFields';\nimport { isMatchFieldArrayName } from './logic/isNameInFieldArray';\nimport generateId from './logic/generateId';\nimport getFieldArrayParentName from './logic/getNodeParentName';\nimport get from './utils/get';\nimport set from './utils/set';\nimport removeArrayAt from './utils/remove';\nimport unset from './utils/unset';\nimport moveArrayAt from './utils/move';\nimport swapArrayAt from './utils/swap';\nimport prependAt from './utils/prepend';\nimport insertAt from './utils/insert';\nimport fillEmptyArray from './utils/fillEmptyArray';\nimport fillBooleanArray from './utils/fillBooleanArray';\nimport compact from './utils/compact';\nimport cloneObject from './utils/cloneObject';\nimport {\n  Field,\n  FieldValues,\n  UseFieldArrayOptions,\n  Control,\n  ArrayField,\n  UnpackNestedValue,\n  DeepPartial,\n  UseFieldArrayMethods,\n} from './types';\n\nconst mapIds = <\n  TFieldArrayValues extends FieldValues = FieldValues,\n  TKeyName extends string = 'id'\n>(\n  values: Partial<TFieldArrayValues>[] = [],\n  keyName: TKeyName,\n): Partial<ArrayField<TFieldArrayValues, TKeyName>>[] => {\n  if (process.env.NODE_ENV !== 'production') {\n    for (const value of values) {\n      if (typeof value === 'object') {\n        if (keyName in value) {\n          console.warn(\n            `📋 useFieldArray fieldValues contain the keyName \\`${keyName}\\` which is reserved for use by useFieldArray. https://react-hook-form.com/api#useFieldArray`,\n          );\n\n          break;\n        }\n      } else {\n        console.warn(\n          `📋 useFieldArray input's name should be in object shape instead of flat array. https://react-hook-form.com/api#useFieldArray`,\n        );\n\n        break;\n      }\n    }\n  }\n\n  return values.map((value: Partial<TFieldArrayValues>) => ({\n    [keyName]: generateId(),\n    ...value,\n  }));\n};\n\nexport const useFieldArray = <\n  TFieldArrayValues extends FieldValues = FieldValues,\n  TKeyName extends string = 'id',\n  TControl extends Control = Control\n>({\n  control,\n  name,\n  keyName = 'id' as TKeyName,\n}: UseFieldArrayOptions<TKeyName, TControl>): UseFieldArrayMethods<\n  TFieldArrayValues,\n  TKeyName\n> => {\n  const methods = useFormContext();\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!control && !methods) {\n      throw new Error(\n        '📋 useFieldArray is missing `control` prop. https://react-hook-form.com/api#useFieldArray',\n      );\n    }\n  }\n\n  const focusIndexRef = React.useRef(-1);\n  const {\n    isFormDirty,\n    updateWatchedValue,\n    resetFieldArrayFunctionRef,\n    fieldArrayNamesRef,\n    fieldsRef,\n    defaultValuesRef,\n    removeFieldEventListener,\n    formStateRef,\n    shallowFieldsStateRef,\n    updateFormState,\n    readFormStateRef,\n    validFieldsRef,\n    fieldsWithValidationRef,\n    fieldArrayDefaultValuesRef,\n    validateResolver,\n    getValues,\n    shouldUnregister,\n    fieldArrayValuesRef,\n  } = control || methods.control;\n\n  const fieldArrayParentName = getFieldArrayParentName(name);\n  const memoizedDefaultValues = React.useRef<Partial<TFieldArrayValues>[]>([\n    ...(get(fieldArrayDefaultValuesRef.current, fieldArrayParentName)\n      ? get(fieldArrayDefaultValuesRef.current, name, [])\n      : get(\n          shouldUnregister\n            ? defaultValuesRef.current\n            : shallowFieldsStateRef.current,\n          name,\n          [],\n        )),\n  ]);\n  const [fields, setFields] = React.useState<\n    Partial<ArrayField<TFieldArrayValues, TKeyName>>[]\n  >(mapIds(memoizedDefaultValues.current, keyName));\n  set(fieldArrayValuesRef.current, name, fields);\n\n  const omitKey = <T extends (Partial<TFieldArrayValues> | undefined)[]>(\n    fields: T,\n  ) => fields.map(({ [keyName]: omitted, ...rest } = {}) => rest);\n\n  fieldArrayNamesRef.current.add(name);\n\n  const getFieldArrayValue = React.useCallback(\n    () => get(fieldArrayValuesRef.current, name, []),\n    [],\n  );\n\n  const getCurrentFieldsValues = () =>\n    get(getValues(), name, getFieldArrayValue()).map(\n      (item: Partial<TFieldArrayValues>, index: number) => ({\n        ...getFieldArrayValue()[index],\n        ...item,\n      }),\n    );\n\n  fieldArrayNamesRef.current.add(name);\n\n  if (\n    fieldArrayParentName &&\n    !get(fieldArrayDefaultValuesRef.current, fieldArrayParentName)\n  ) {\n    set(\n      fieldArrayDefaultValuesRef.current,\n      fieldArrayParentName,\n      cloneObject(get(defaultValuesRef.current, fieldArrayParentName)),\n    );\n  }\n\n  const setFieldAndValidState = (\n    fieldsValues: Partial<ArrayField<TFieldArrayValues, TKeyName>>[],\n  ) => {\n    setFields(fieldsValues);\n    set(fieldArrayValuesRef.current, name, fieldsValues);\n\n    if (readFormStateRef.current.isValid && validateResolver) {\n      const values = getValues();\n      set(values, name, fieldsValues);\n      validateResolver(values);\n    }\n  };\n\n  const resetFields = () => {\n    for (const key in fieldsRef.current) {\n      isMatchFieldArrayName(key, name) &&\n        removeFieldEventListener(fieldsRef.current[key] as Field, true);\n    }\n  };\n\n  const cleanup = <T>(ref: T) =>\n    !compact(get(ref, name, [])).length && unset(ref, name);\n\n  const updateDirtyFieldsWithDefaultValues = <\n    T extends (Partial<TFieldArrayValues> | undefined)[]\n  >(\n    updatedFieldArrayValues?: T,\n  ) => {\n    if (updatedFieldArrayValues) {\n      set(\n        formStateRef.current.dirtyFields,\n        name,\n        setFieldArrayDirtyFields(\n          omitKey(updatedFieldArrayValues),\n          get(defaultValuesRef.current, name, []),\n          get(formStateRef.current.dirtyFields, name, []),\n        ),\n      );\n    }\n  };\n\n  const batchStateUpdate = <\n    T extends Function,\n    K extends (Partial<TFieldArrayValues> | undefined)[]\n  >(\n    method: T,\n    args: {\n      argA?: unknown;\n      argB?: unknown;\n      argC?: unknown;\n      argD?: unknown;\n    },\n    updatedFieldValues?: K,\n    updatedFormValues: (Partial<TFieldArrayValues> | undefined)[] = [],\n    shouldSet = true,\n    shouldUpdateValid = false,\n  ) => {\n    if (get(shallowFieldsStateRef.current, name)) {\n      const output = method(\n        get(shallowFieldsStateRef.current, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSet && set(shallowFieldsStateRef.current, name, output);\n    }\n\n    if (get(fieldArrayDefaultValuesRef.current, name)) {\n      const output = method(\n        get(fieldArrayDefaultValuesRef.current, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSet && set(fieldArrayDefaultValuesRef.current, name, output);\n      cleanup(fieldArrayDefaultValuesRef.current);\n    }\n\n    if (Array.isArray(get(formStateRef.current.errors, name))) {\n      const output = method(\n        get(formStateRef.current.errors, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSet && set(formStateRef.current.errors, name, output);\n      cleanup(formStateRef.current.errors);\n    }\n\n    if (\n      readFormStateRef.current.touched &&\n      get(formStateRef.current.touched, name)\n    ) {\n      const output = method(\n        get(formStateRef.current.touched, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSet && set(formStateRef.current.touched, name, output);\n      cleanup(formStateRef.current.touched);\n    }\n\n    if (\n      readFormStateRef.current.dirtyFields ||\n      readFormStateRef.current.isDirty\n    ) {\n      const output = method(\n        get(formStateRef.current.dirtyFields, name, []),\n        args.argC,\n        args.argD,\n      );\n      shouldSet && set(formStateRef.current.dirtyFields, name, output);\n      updateDirtyFieldsWithDefaultValues(updatedFieldValues);\n      cleanup(formStateRef.current.dirtyFields);\n    }\n\n    if (\n      shouldUpdateValid &&\n      readFormStateRef.current.isValid &&\n      !validateResolver\n    ) {\n      set(\n        validFieldsRef.current,\n        name,\n        method(get(validFieldsRef.current, name, []), args.argA),\n      );\n      cleanup(validFieldsRef.current);\n\n      set(\n        fieldsWithValidationRef.current,\n        name,\n        method(get(fieldsWithValidationRef.current, name, []), args.argA),\n      );\n      cleanup(fieldsWithValidationRef.current);\n    }\n\n    updateFormState({\n      isDirty: isFormDirty(name, omitKey(updatedFormValues)),\n    });\n  };\n\n  const append = (\n    value: Partial<TFieldArrayValues> | Partial<TFieldArrayValues>[],\n    shouldFocus = true,\n  ) => {\n    const updateFormValues = [\n      ...getCurrentFieldsValues(),\n      ...mapIds(Array.isArray(value) ? value : [value], keyName),\n    ];\n    setFieldAndValidState(updateFormValues);\n\n    if (\n      readFormStateRef.current.dirtyFields ||\n      readFormStateRef.current.isDirty\n    ) {\n      updateDirtyFieldsWithDefaultValues(updateFormValues);\n\n      updateFormState({\n        isDirty: true,\n        dirtyFields: formStateRef.current.dirtyFields,\n      });\n    }\n\n    !shouldUnregister &&\n      set(shallowFieldsStateRef.current, name, [\n        ...(get(shallowFieldsStateRef.current, name) || []),\n        value,\n      ]);\n    focusIndexRef.current = shouldFocus ? fields.length : -1;\n  };\n\n  const prepend = (\n    value: Partial<TFieldArrayValues> | Partial<TFieldArrayValues>[],\n    shouldFocus = true,\n  ) => {\n    const emptyArray = fillEmptyArray(value);\n    const updatedFieldArrayValues = prependAt(\n      getCurrentFieldsValues(),\n      mapIds(Array.isArray(value) ? value : [value], keyName),\n    );\n\n    setFieldAndValidState(updatedFieldArrayValues);\n    resetFields();\n    batchStateUpdate(\n      prependAt,\n      {\n        argA: emptyArray,\n        argC: fillBooleanArray(value),\n      },\n      updatedFieldArrayValues,\n    );\n    focusIndexRef.current = shouldFocus ? 0 : -1;\n  };\n\n  const remove = (index?: number | number[]) => {\n    const fieldValues = getCurrentFieldsValues();\n    const updatedFieldValues: (\n      | Partial<TFieldArrayValues>\n      | undefined\n    )[] = removeArrayAt(fieldValues, index);\n    setFieldAndValidState(\n      updatedFieldValues as Partial<ArrayField<TFieldArrayValues, TKeyName>>[],\n    );\n    resetFields();\n    batchStateUpdate(\n      removeArrayAt,\n      {\n        argA: index,\n        argC: index,\n      },\n      updatedFieldValues,\n      removeArrayAt(fieldValues, index),\n      true,\n      true,\n    );\n  };\n\n  const insert = (\n    index: number,\n    value: Partial<TFieldArrayValues> | Partial<TFieldArrayValues>[],\n    shouldFocus = true,\n  ) => {\n    const emptyArray = fillEmptyArray(value);\n    const fieldValues = getCurrentFieldsValues();\n    const updatedFieldArrayValues = insertAt(\n      fieldValues,\n      index,\n      mapIds(Array.isArray(value) ? value : [value], keyName),\n    );\n\n    setFieldAndValidState(updatedFieldArrayValues);\n    resetFields();\n    batchStateUpdate(\n      insertAt,\n      {\n        argA: index,\n        argB: emptyArray,\n        argC: index,\n        argD: fillBooleanArray(value),\n      },\n      updatedFieldArrayValues,\n      insertAt(fieldValues, index),\n    );\n    focusIndexRef.current = shouldFocus ? index : -1;\n  };\n\n  const swap = (indexA: number, indexB: number) => {\n    const fieldValues = getCurrentFieldsValues();\n    swapArrayAt(fieldValues, indexA, indexB);\n    resetFields();\n    setFieldAndValidState([...fieldValues]);\n    batchStateUpdate(\n      swapArrayAt,\n      {\n        argA: indexA,\n        argB: indexB,\n        argC: indexA,\n        argD: indexB,\n      },\n      undefined,\n      fieldValues,\n      false,\n    );\n  };\n\n  const move = (from: number, to: number) => {\n    const fieldValues = getCurrentFieldsValues();\n    moveArrayAt(fieldValues, from, to);\n    resetFields();\n    setFieldAndValidState([...fieldValues]);\n    batchStateUpdate(\n      moveArrayAt,\n      {\n        argA: from,\n        argB: to,\n        argC: from,\n        argD: to,\n      },\n      undefined,\n      fieldValues,\n      false,\n    );\n  };\n\n  React.useEffect(() => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!name) {\n        console.warn(\n          '📋 useFieldArray is missing `name` attribute. https://react-hook-form.com/api#useFieldArray',\n        );\n      }\n    }\n\n    const defaultValues = get(fieldArrayDefaultValuesRef.current, name);\n\n    if (defaultValues && fields.length < defaultValues.length) {\n      defaultValues.pop();\n      set(fieldArrayDefaultValuesRef.current, name, defaultValues);\n    }\n\n    updateWatchedValue(name);\n\n    if (focusIndexRef.current > -1) {\n      for (const key in fieldsRef.current) {\n        const field = fieldsRef.current[key];\n        if (\n          key.startsWith(`${name}[${focusIndexRef.current}]`) &&\n          field!.ref.focus\n        ) {\n          field!.ref.focus();\n          break;\n        }\n      }\n    }\n\n    focusIndexRef.current = -1;\n  }, [fields, name]);\n\n  React.useEffect(() => {\n    const resetFunctions = resetFieldArrayFunctionRef.current;\n    const fieldArrayNames = fieldArrayNamesRef.current;\n\n    if (!getFieldArrayParentName(name)) {\n      resetFunctions[name] = <TFieldValues>(\n        data?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n      ) => {\n        resetFields();\n        !data && unset(fieldArrayDefaultValuesRef.current, name);\n        unset(shallowFieldsStateRef.current, name);\n        memoizedDefaultValues.current = get(\n          data || defaultValuesRef.current,\n          name,\n        );\n        setFields(mapIds(memoizedDefaultValues.current, keyName));\n      };\n    }\n\n    return () => {\n      if (process.env.NODE_ENV !== 'production') {\n        return;\n      }\n\n      resetFields();\n      delete resetFunctions[name];\n      unset(fieldArrayValuesRef, name);\n      fieldArrayNames.delete(name);\n    };\n  }, []);\n\n  return {\n    swap: React.useCallback(swap, [name]),\n    move: React.useCallback(move, [name]),\n    prepend: React.useCallback(prepend, [name]),\n    append: React.useCallback(append, [name, fields]),\n    remove: React.useCallback(remove, [name]),\n    insert: React.useCallback(insert, [name]),\n    fields,\n  };\n};\n","import { useFormContext } from './useFormContext';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport isUndefined from './utils/isUndefined';\nimport get from './utils/get';\nimport * as React from 'react';\nimport isFunction from './utils/isFunction';\nimport skipValidation from './logic/skipValidation';\nimport getInputValue from './logic/getInputValue';\nimport set from './utils/set';\nimport { ControllerProps, FieldValues, UseField } from './types';\n\nexport function useField<\n  TAs extends\n    | React.ReactElement\n    | React.ComponentType<any>\n    | 'input'\n    | 'select'\n    | 'textarea',\n  TFieldValues extends FieldValues = FieldValues\n>({\n  name,\n  rules,\n  defaultValue,\n  control,\n  onFocus,\n}: Exclude<\n  ControllerProps<TAs, TFieldValues>,\n  'as' | 'render'\n>): UseField<TFieldValues> {\n  const methods = useFormContext<TFieldValues>();\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!control && !methods) {\n      throw new Error(\n        '📋 Controller is missing `control` prop. https://react-hook-form.com/api#Controller',\n      );\n    }\n  }\n\n  const {\n    defaultValuesRef,\n    setValue,\n    register,\n    unregister,\n    trigger,\n    mode,\n    reValidateMode: { isReValidateOnBlur, isReValidateOnChange },\n    formStateRef: {\n      current: { isSubmitted, touched, errors, dirtyFields },\n    },\n    updateFormState,\n    readFormStateRef,\n    fieldsRef,\n    fieldArrayNamesRef,\n    shallowFieldsStateRef,\n  } = control || methods.control;\n\n  const isNotFieldArray = !isNameInFieldArray(fieldArrayNamesRef.current, name);\n  const getInitialValue = () =>\n    !isUndefined(get(shallowFieldsStateRef.current, name)) && isNotFieldArray\n      ? get(shallowFieldsStateRef.current, name)\n      : isUndefined(defaultValue)\n      ? get(defaultValuesRef.current, name)\n      : defaultValue;\n  const [value, setInputStateValue] = React.useState(getInitialValue());\n  const valueRef = React.useRef(value);\n  const ref = React.useRef({\n    focus: () => null,\n  });\n  const onFocusRef = React.useRef(\n    onFocus ||\n      (() => {\n        if (isFunction(ref.current.focus)) {\n          ref.current.focus();\n        }\n\n        if (process.env.NODE_ENV !== 'production') {\n          if (!isFunction(ref.current.focus)) {\n            console.warn(\n              `📋 'ref' from Controller render prop must be attached to a React component or a DOM Element whose ref provides a 'focus()' method`,\n            );\n          }\n        }\n      }),\n  );\n\n  const shouldValidate = React.useCallback(\n    (isBlurEvent?: boolean) =>\n      !skipValidation({\n        isBlurEvent,\n        isReValidateOnBlur,\n        isReValidateOnChange,\n        isSubmitted,\n        isTouched: !!get(touched, name),\n        ...mode,\n      }),\n    [\n      isReValidateOnBlur,\n      isReValidateOnChange,\n      isSubmitted,\n      touched,\n      name,\n      mode,\n    ],\n  );\n\n  const commonTask = React.useCallback(([event]: any[]) => {\n    const data = getInputValue(event);\n    setInputStateValue(data);\n    valueRef.current = data;\n    return data;\n  }, []);\n\n  const registerField = React.useCallback(\n    (shouldUpdateValue?: boolean) => {\n      if (process.env.NODE_ENV !== 'production') {\n        if (!name) {\n          return console.warn(\n            '📋 Field is missing `name` prop. https://react-hook-form.com/api#Controller',\n          );\n        }\n      }\n\n      if (fieldsRef.current[name]) {\n        fieldsRef.current[name] = {\n          ref: fieldsRef.current[name]!.ref,\n          ...rules,\n        };\n      } else {\n        register(\n          Object.defineProperty(\n            {\n              name,\n              focus: onFocusRef.current,\n            },\n            'value',\n            {\n              set(data) {\n                setInputStateValue(data);\n                valueRef.current = data;\n              },\n              get() {\n                return valueRef.current;\n              },\n            },\n          ),\n          rules,\n        );\n\n        shouldUpdateValue = isUndefined(get(defaultValuesRef.current, name));\n      }\n\n      shouldUpdateValue &&\n        isNotFieldArray &&\n        setInputStateValue(getInitialValue());\n    },\n    [rules, name, register],\n  );\n\n  React.useEffect(() => () => unregister(name), [name]);\n\n  React.useEffect(() => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (isUndefined(value)) {\n        console.warn(\n          `📋 ${name} is missing in the 'defaultValue' prop of either its Controller (https://react-hook-form.com/api#Controller) or useForm (https://react-hook-form.com/api#useForm)`,\n        );\n      }\n\n      if (!isNotFieldArray && isUndefined(defaultValue)) {\n        console.warn(\n          '📋 Controller is missing `defaultValue` prop when using `useFieldArray`. https://react-hook-form.com/api#Controller',\n        );\n      }\n    }\n\n    registerField();\n  }, [registerField]);\n\n  React.useEffect(() => {\n    !fieldsRef.current[name] && registerField(true);\n  });\n\n  const onBlur = React.useCallback(() => {\n    if (readFormStateRef.current.touched && !get(touched, name)) {\n      set(touched, name, true);\n      updateFormState({\n        touched,\n      });\n    }\n\n    shouldValidate(true) && trigger(name);\n  }, [name, updateFormState, shouldValidate, trigger, readFormStateRef]);\n\n  const onChange = React.useCallback(\n    (...event: any[]) =>\n      setValue(name, commonTask(event), {\n        shouldValidate: shouldValidate(),\n        shouldDirty: true,\n      }),\n    [setValue, name, shouldValidate],\n  );\n\n  return {\n    field: {\n      onChange,\n      onBlur,\n      name,\n      value,\n      ref,\n    },\n    state: {\n      inValid: !get(errors, name),\n      isDirty: !!get(dirtyFields, name),\n      isTouched: !!get(touched, name),\n    },\n  };\n}\n","import isUndefined from '../utils/isUndefined';\nimport isObject from '../utils/isObject';\nimport isPrimitive from '../utils/isPrimitive';\n\nexport default (event: any) =>\n  isPrimitive(event) ||\n  !isObject(event.target) ||\n  (isObject(event.target) && !event.type)\n    ? event\n    : isUndefined(event.target.value)\n    ? event.target.checked\n    : event.target.value;\n","import * as React from 'react';\nimport { useField } from './useField';\nimport { ControllerProps, FieldValues } from './types';\n\ntype NativeInputs = 'input' | 'select' | 'textarea';\n\nconst Controller = <\n  TAs extends React.ReactElement | React.ComponentType<any> | NativeInputs,\n  TFieldValues extends FieldValues = FieldValues\n>(\n  props: ControllerProps<TAs, TFieldValues>,\n) => {\n  const { rules, as, render, defaultValue, control, onFocus, ...rest } = props;\n  const { field } = useField(props);\n\n  const componentProps = {\n    ...rest,\n    ...field,\n  };\n\n  return as\n    ? React.isValidElement(as)\n      ? React.cloneElement(as, componentProps)\n      : React.createElement(as as NativeInputs, componentProps as any)\n    : render\n    ? render(field)\n    : null;\n};\n\nexport { Controller };\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Field } from '../types';\n\nexport default function attachEventListeners(\n  { ref }: Field,\n  shouldAttachChangeEvent?: boolean,\n  handleChange?: EventListenerOrEventListenerObject,\n): void {\n  if (isHTMLElement(ref) && handleChange) {\n    ref.addEventListener(\n      shouldAttachChangeEvent ? EVENTS.CHANGE : EVENTS.INPUT,\n      handleChange,\n    );\n    ref.addEventListener(EVENTS.BLUR, handleChange);\n  }\n}\n","import { FieldElement } from '../types';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-one`;\n","import get from '../utils/get';\nimport isUndefined from '../utils/isUndefined';\nimport { FieldErrors, FieldRefs } from '../types';\n\nexport default <TFieldValues>(\n  fields: FieldRefs<TFieldValues>,\n  fieldErrors: FieldErrors<TFieldValues>,\n) => {\n  for (const key in fields) {\n    if (get(fieldErrors, key)) {\n      const field = fields[key];\n\n      if (field) {\n        if (field.ref.focus && isUndefined(field.ref.focus())) {\n          break;\n        } else if (field.options) {\n          field.options[0].ref.focus();\n\n          break;\n        }\n      }\n    }\n  }\n};\n","import * as React from 'react';\nimport { Field, FieldRefs } from '../types';\nimport isDetached from './isDetached';\n\nexport default function onDomRemove<TFieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  removeFieldEventListenerAndRef: (\n    field: Field | undefined,\n    forceDelete?: boolean,\n  ) => void,\n): MutationObserver {\n  const observer = new MutationObserver((): void => {\n    for (const field of Object.values(fieldsRef.current)) {\n      if (field && field.options) {\n        for (const option of field.options) {\n          if (option && option.ref && isDetached(option.ref)) {\n            removeFieldEventListenerAndRef(field);\n          }\n        }\n      } else if (field && isDetached(field.ref)) {\n        removeFieldEventListenerAndRef(field);\n      }\n    }\n  });\n\n  observer.observe(window.document, {\n    childList: true,\n    subtree: true,\n  });\n\n  return observer;\n}\n","import * as React from 'react';\nimport { useFormContext } from './useFormContext';\nimport isUndefined from './utils/isUndefined';\nimport isString from './utils/isString';\nimport generateId from './logic/generateId';\nimport get from './utils/get';\nimport {\n  DeepPartial,\n  UseWatchOptions,\n  FieldValues,\n  UnpackNestedValue,\n  Control,\n} from './types';\n\nexport function useWatch<TWatchFieldValues extends FieldValues>(props: {\n  defaultValue?: UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\n  control?: Control;\n}): UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\nexport function useWatch<TWatchFieldValue extends any>(props: {\n  name: string;\n  control?: Control;\n}): undefined | UnpackNestedValue<TWatchFieldValue>;\nexport function useWatch<TWatchFieldValue extends any>(props: {\n  name: string;\n  defaultValue: UnpackNestedValue<TWatchFieldValue>;\n  control?: Control;\n}): UnpackNestedValue<TWatchFieldValue>;\nexport function useWatch<TWatchFieldValues extends FieldValues>(props: {\n  name: string[];\n  defaultValue?: UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\n  control?: Control;\n}): UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\nexport function useWatch<TWatchFieldValues>({\n  control,\n  name,\n  defaultValue,\n}: UseWatchOptions): TWatchFieldValues {\n  const methods = useFormContext();\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!control && !methods) {\n      throw new Error(\n        '📋 useWatch is missing `control` prop. https://react-hook-form.com/api#useWatch',\n      );\n    }\n  }\n\n  const {\n    useWatchFieldsRef,\n    useWatchRenderFunctionsRef,\n    watchInternal,\n    defaultValuesRef,\n  } = control || methods.control;\n  const updateValue = React.useState<unknown>()[1];\n  const idRef = React.useRef<string>();\n  const defaultValueRef = React.useRef(defaultValue);\n\n  React.useEffect(() => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (name === '') {\n        console.warn(\n          '📋 useWatch is missing `name` attribute. https://react-hook-form.com/api#useWatch',\n        );\n      }\n    }\n\n    const id = (idRef.current = generateId());\n    const watchFieldsHookRender = useWatchRenderFunctionsRef.current;\n    const watchFieldsHook = useWatchFieldsRef.current;\n    watchFieldsHook[id] = new Set();\n    watchFieldsHookRender[id] = () => updateValue({});\n    watchInternal(name, defaultValueRef.current, id);\n\n    return () => {\n      delete watchFieldsHook[id];\n      delete watchFieldsHookRender[id];\n    };\n  }, [\n    name,\n    useWatchRenderFunctionsRef,\n    useWatchFieldsRef,\n    watchInternal,\n    defaultValueRef,\n  ]);\n\n  return idRef.current\n    ? watchInternal(name, defaultValueRef.current, idRef.current)\n    : isUndefined(defaultValue)\n    ? isString(name)\n      ? get(defaultValuesRef.current, name)\n      : Array.isArray(name)\n      ? name.reduce(\n          (previous, inputName) => ({\n            ...previous,\n            [inputName]: get(defaultValuesRef.current, inputName),\n          }),\n          {},\n        )\n      : defaultValuesRef.current\n    : defaultValue;\n}\n"],"names":["value","HTMLElement","EVENTS","VALIDATION_MODE","INPUT_VALIDATION_RULES","isObjectType","isNullOrUndefined","Array","isArray","Date","test","filter","Boolean","input","compact","replace","split","set","object","path","index","tempPath","isKey","stringToPath","length","lastIndex","key","newValue","objValue","isObject","isNaN","data","val","undefined","obj","defaultValue","result","reduce","isUndefined","ref","validateWithStateUpdate","isHTMLElement","removeEventListener","defaultReturn","isValid","options","previous","option","checked","element","type","SELECT","defaultResult","validResult","values","map","_a","attributes","getFieldValue","fieldsRef","name","shallowFieldsStateRef","excludeDisabled","field","current","disabled","valueAsNumber","valueAsDate","setValueAs","isFileInput","files","isRadioInput","getRadioValue","isMultipleSelect","__spread","isCheckBox","getCheckboxValue","get","isDetached","nodeType","Node","DOCUMENT_NODE","parentNode","Object","keys","unset","updatePath","childObject","slice","baseGet","previousObjRef","k","objectRef","currentPaths","currentPathsLength","item","isEmptyObject","isBoolean","isSameRef","fieldValue","deepMerge","target","source","isPrimitive","targetValue","sourceValue","setDirtyFields","defaultValues","dirtyFields","parentName","shallowFieldsState","shouldUnregister","search","output","name_1","isString","startsWith","find","transformToNestObject","deepEqual","object1","object2","isErrorObject","React.isValidElement","keys1","keys2","keys1_1","__values","val1","val2","RegExp","validationData","isRegex","message","getValidateError","isMessage","validateAllFieldCriteria","errors","types","required","maxLength","minLength","min","max","pattern","validate","error","isRadio","isCheckBoxInput","isRadioOrCheckbox","isEmpty","appendErrorsCurry","appendErrors","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","_b","getValueAndMessage","value_1","exceedMin","maxOutput","minOutput","valueDate","valueNumber","parseFloat","maxLengthOutput","minLengthOutput","_c","patternValue","getFieldsValue","validateRef","isFunction","_h","validateError","validationResult","_d","entries","_f","__read","validateFunction","validateResult","getPath","rootPath","paths","property","rootName","push","fieldValues","fieldName","watchFields","inputValue","isSingleField","add","forEach","isOnBlur","isOnChange","isOnTouch","isTouched","isReValidateOnBlur","isReValidateOnChange","isBlurEvent","isSubmitted","substring","indexOf","isMatchFieldArrayName","searchName","names","some","window","document","cloneObject","copy","isWeb","File","getTime","Set","data_1","Map","mode","isOnSubmit","isOnAll","isWindowUndefined","isProxyEnabled","Proxy","FormContext","React.createContext","displayName","useFormContext","React.useContext","d","performance","now","c","r","Math","random","toString","indexes","i","temp","indexes_1","splice","removeAtIndexes","sort","from","to","indexA","indexB","prepend","insert","fill","mapIds","keyName","generateId","useField","rules","control","onFocus","methods","defaultValuesRef","setValue","register","unregister","trigger","touched","updateFormState","readFormStateRef","fieldArrayNamesRef","isNotFieldArray","isNameInFieldArray","getInitialValue","_e","React.useState","setInputStateValue","valueRef","React.useRef","focus","onFocusRef","shouldValidate","React.useCallback","skipValidation","commonTask","event","getInputValue","registerField","shouldUpdateValue","defineProperty","React.useEffect","onBlur","onChange","_i","shouldDirty","state","inValid","isDirty","props","as","render","rest","componentProps","React.cloneElement","React.createElement","children","Provider","__assign","focusIndexRef","isFormDirty","updateWatchedValue","resetFieldArrayFunctionRef","removeFieldEventListener","formStateRef","validFieldsRef","fieldsWithValidationRef","fieldArrayDefaultValuesRef","validateResolver","getValues","fieldArrayValuesRef","fieldArrayParentName","getFieldArrayParentName","memoizedDefaultValues","fields","setFields","omitKey","getFieldArrayValue","getCurrentFieldsValues","setFieldAndValidState","fieldsValues","resetFields","cleanup","updateDirtyFieldsWithDefaultValues","updatedFieldArrayValues","setFieldArrayDirtyFields","batchStateUpdate","method","args","updatedFieldValues","updatedFormValues","shouldSet","shouldUpdateValid","argA","argB","argC","argD","pop","resetFunctions","fieldArrayNames","delete","swap","swapArrayAt","move","moveArrayAt","shouldFocus","emptyArray","fillEmptyArray","prependAt","fillBooleanArray","append","updateFormValues","remove","removeArrayAt","insertAt","reValidateMode","resolver","context","shouldFocusError","_g","criteriaMode","watchFieldsRef","useWatchFieldsRef","useWatchRenderFunctionsRef","defaultValuesAtRenderRef","isUnMount","isWatchAllRef","handleChangeRef","contextRef","resolverRef","modeRef","modeChecker","isValidateAllFieldCriteria","_j","submitCount","isSubmitting","isSubmitSuccessful","formState","setFormState","observerRef","_k","shouldRenderBaseOnError","shouldRender","shouldReRender","validFields","fieldsWithValidation","previousError","isErrorStateChanged","setFieldValue","rawValue","radioRef","selectRef","selected","includes","checkboxRef","formValues","updateAndGetDirtyState","isFieldDirty","isDirtyFieldExist","previousIsDirty","isChanged","executeValidation","skipReRender","validateField","executeSchemaOrResolverValidation","previousFormIsValid","isInputsValid","every","Promise","all","setInternalValues","setInternalValue","config","has","isFieldWatched","match","renderWatchedInputs","found","size","getNodeParentName","setFieldArrayDefaultValues","payload","payload_1","getFieldsValues","shouldSkipValidation","parentNodeName","currentError","forceDelete","handleChange","fieldRef","removeAllEventListeners","findRemovedFieldAndRemoveListener","removeFieldEventListenerAndRef","watchInternal","fieldNames","watchId","fieldArrayValue","assignWatchFields","combinedDefaultValues","registerFieldRef","fieldRefAndValidationOptions","isRadioOrCheckboxFunction","isFieldArray","compareRef","currentRef","isEmptyDefaultValue","isEmptyUnmountFields","then","shouldAttachChangeEvent","addEventListener","attachEventListeners","handleSubmit","onValid","onInvalid","e","preventDefault","persist","fieldErrors","name_2","fieldError","focusOnErrorField","observer","MutationObserver","observe","childList","subtree","onDomRemove","disconnect","commonProps","refOrRegisterOptions","React.useMemo","watch","prop","reset","omitResetState","inputRef","closest","resetFieldArray","resetRefs","clearErrors","inputName","setError","updateValue","idRef","defaultValueRef","id","watchFieldsHookRender","watchFieldsHook"],"mappings":"8lFAAA,eAAgBA,GACd,OAAAA,aAAiBC,aCCNC,EACL,OADKA,EAEH,SAFGA,EAGJ,QAGIC,EACH,SADGA,EAED,WAFCA,EAGD,WAHCA,EAIA,YAJAA,EAKN,MAOMC,EACN,MADMA,EAEN,MAFMA,EAGA,YAHAA,EAIA,YAJAA,EAKF,UALEA,EAMD,WANCA,EAOD,WC3BZ,eAAgBJ,GAA8C,OAAS,MAATA,GCEjDK,EAAe,SAACL,GAAmB,MAAiB,iBAAVA,cAErBA,GAChC,OAACM,EAAkBN,KAClBO,MAAMC,QAAQR,IACfK,EAAaL,MACXA,aAAiBS,kBCRLT,GAAkB,MAAA,QAAQU,KAAKV,eCA/BA,GAAiB,OAAAA,EAAMW,OAAOC,qBCE9BC,GACd,OAAAC,EACED,EACGE,QAAQ,SAAU,IAClBA,QAAQ,MAAO,KACfA,QAAQ,MAAO,IACfC,MAAM,gBCHWC,EACtBC,EACAC,EACAnB,GAOA,IALA,IAAIoB,GAAS,EACPC,EAAWC,EAAMH,GAAQ,CAACA,GAAQI,EAAaJ,GAC/CK,EAASH,EAASG,OAClBC,EAAYD,EAAS,IAElBJ,EAAQI,GAAQ,CACvB,IAAME,EAAML,EAASD,GACjBO,EAAW3B,EAEf,GAAIoB,IAAUK,EAAW,CACvB,IAAMG,EAAWV,EAAOQ,GACxBC,EACEE,EAASD,IAAarB,MAAMC,QAAQoB,GAChCA,EACCE,OAAOT,EAASD,EAAQ,IAEzB,GADA,GAGRF,EAAOQ,GAAOC,EACdT,EAASA,EAAOQ,GAElB,OAAOR,EC3BT,eAAgBa,EAAmB/B,GACjC,IAAK,IAAM0B,kBADsB1B,MACf+B,EACfT,EAAMI,GAAqC1B,EAAM0B,GAAOK,EAAKL,GAAhDT,EAAIjB,EAAO0B,EAAKK,EAAKL,IAErC,OAAO1B,cCROgC,GAAmC,YAAQC,IAARD,cCInCE,EAAef,EAAcgB,gBAA7BD,MACd,IAAME,EAAStB,EAAQK,EAAKH,MAAM,cAAcqB,QAC9C,SAACD,EAAQV,GAAQ,OAACpB,EAAkB8B,GAAUA,EAASA,EAAOV,KAC9DQ,GAGF,OAAOI,EAAYF,IAAWA,IAAWF,EACrCI,EAAYJ,EAAIf,IACdgB,EACAD,EAAIf,GACNiB,cCTJG,EACAC,GAEIC,EAAcF,IAAQA,EAAIG,sBAC5BH,EAAIG,oBAAoBxC,EAAcsC,GACtCD,EAAIG,oBAAoBxC,EAAesC,GACvCD,EAAIG,oBAAoBxC,EAAasC,KCJnCG,EAAkC,CACtCC,SAAS,EACT5C,MAAO,eAGO6C,GACd,OAAAtC,MAAMC,QAAQqC,GACVA,EAAQR,QACN,SAACS,EAAUC,GACT,OAAAA,GAAUA,EAAOR,IAAIS,QACjB,CACEJ,SAAS,EACT5C,MAAO+C,EAAOR,IAAIvC,OAEpB8C,IACNH,GAEFA,cCtBUM,GACd,MAAiB,UAAjBA,EAAQC,iBCDMD,GACd,MAAiB,SAAjBA,EAAQC,iBCDMD,GACd,MAAiB,aAAjBA,EAAQC,iBCAMD,GACd,MAAoBE,oBAApBF,EAAQC,MCIJE,EAAqC,CACzCpD,OAAO,EACP4C,SAAS,GAGLS,EAAc,CAAErD,OAAO,EAAM4C,SAAS,cAE5BC,GACd,GAAItC,MAAMC,QAAQqC,GAAU,CAC1B,GAAIA,EAAQrB,OAAS,EAAG,CACtB,IAAM8B,EAAST,EACZlC,QAAO,SAACoC,GAAW,OAAAA,GAAUA,EAAOR,IAAIS,WACxCO,KAAI,SAACC,GAAuB,sBAC/B,MAAO,CAAExD,MAAOsD,EAAQV,UAAWU,EAAO9B,QAGtC,IAAAgC,EAAiCX,EAAQ,GAAGN,IAA1CS,YAAShD,UAAOyD,eAExB,OAAOT,EACHS,IAAenB,EAAamB,EAAmBzD,OAC7CsC,EAAYtC,IAAoB,KAAVA,EACpBqD,EACA,CAAErD,MAAOA,EAAO4C,SAAS,GAC3BS,EACFD,EAGN,OAAOA,YCxBeM,EACtBC,EACAC,EACAC,EACAC,GAEA,IAAMC,EAAQJ,EAAUK,QAAQJ,GAEhC,GAAIG,EAAO,CAEP,IAAAP,EAKEO,MALK/D,UAAOiE,aACd1B,EAIEwB,MAHFG,EAGEH,gBAFFI,EAEEJ,cADFK,EACEL,aAEJ,GAAIE,GAAYH,EACd,OAGF,OAAIO,EAAY9B,GACPA,EAAI+B,MAGTC,EAAahC,GACRiC,EAAcT,EAAMlB,SAAS7C,MAGlCyE,EAAiBlC,GCrCvBmC,EDsCkCnC,EAAIM,SCrCnClC,QAAO,SAAC6C,GAA0B,qBAClCD,KAAI,SAACC,GAAsB,kBDuCxBmB,EAAWpC,GACNqC,EAAiBb,EAAMlB,SAAS7C,MAGlCkE,GACFlE,EACDmE,EACC5B,EAAyB4B,YAC1BC,EACAA,EAAWpE,GACXA,EAGN,GAAI6D,EACF,OAAOgB,EAAIhB,EAAsBG,QAASJ,YExDtBkB,EAAW7B,GACjC,OAAKA,GAKDA,aAAmBhD,aACrBgD,EAAQ8B,WAAaC,KAAKC,eAKrBH,EAAW7B,EAAQiC,YCX5B,eAAgBlF,GACd,OAAA6B,EAAS7B,KAAWmF,OAAOC,KAAKpF,GAAOwB,mBCJzBxB,GAAqC,MAAiB,kBAAVA,YCmBpCqF,EAAMnE,EAAaC,GACzC,IAAMmE,EAAahE,EAAMH,GAAQ,CAACA,GAAQI,EAAaJ,GACjDoE,EACiB,GAArBD,EAAW9D,OAAcN,EAf7B,SAAiBA,EAAaoE,GAK5B,IAJA,IACM9D,EADO8D,EAAWE,MAAM,GAAI,GACdhE,OAChBJ,EAAQ,EAELA,EAAQI,GACbN,EAASoB,EAAYpB,GAAUE,IAAUF,EAAOoE,EAAWlE,MAG7D,OAAOF,EAM6BuE,CAAQvE,EAAQoE,GAC9C5D,EAAM4D,EAAWA,EAAW9D,OAAS,GACvCkE,OAAiBzD,EAEjBsD,UACKA,EAAY7D,GAGrB,IAAK,IAAIiE,EAAI,EAAGA,EAAIL,EAAWE,MAAM,GAAI,GAAGhE,OAAQmE,IAAK,CACvD,IAAIvE,GAAS,EACTwE,OAAY3D,EACV4D,EAAeP,EAAWE,MAAM,IAAKG,EAAI,IACzCG,EAAqBD,EAAarE,OAAS,EAMjD,IAJImE,EAAI,IACND,EAAiBxE,KAGVE,EAAQyE,EAAarE,QAAQ,CACpC,IAAMuE,EAAOF,EAAazE,GAC1BwE,EAAYA,EAAYA,EAAUG,GAAQ7E,EAAO6E,GAG/CD,IAAuB1E,IACrBS,EAAS+D,IAAcI,EAAcJ,IACpCrF,MAAMC,QAAQoF,KACZA,EAAUjF,QACT,SAACoB,GACC,OAACF,EAASE,KAAUiE,EAAcjE,IAAUkE,EAAUlE,MACxDP,UAENkE,SAAwBA,EAAeK,UAAe7E,EAAO6E,IAG/DL,EAAiBE,GAIrB,OAAO1E,EChDT,IAAMgF,EAAY,SAACC,EAAmB5D,GACpC,OAAA4D,GAAcA,EAAW5D,MAAQA,GCTnC,eAAgBvC,GACd,OAAAM,EAAkBN,KAAWK,EAAaL,aCF5BoG,EAGdC,EAAWC,GACX,GAAIC,EAAYF,IAAWE,EAAYD,GACrC,OAAOA,EAGT,IAAK,IAAM5E,KAAO4E,EAAQ,CACxB,IAAME,EAAcH,EAAO3E,GACrB+E,EAAcH,EAAO5E,GAE3B,IACE2E,EAAO3E,GACJG,EAAS2E,IAAgB3E,EAAS4E,IAClClG,MAAMC,QAAQgG,IAAgBjG,MAAMC,QAAQiG,GACzCL,EAAUI,EAAaC,GACvBA,EACN,WAGJ,OAAOJ,ECpBT,SAASK,EAKPpD,EACAqD,EACAC,EACA1B,EACA2B,GAIA,UAFIzF,GAAS,IAEJA,EAAQkC,EAAO9B,QAAQ,CAC9B,IAAK,IAAME,KAAO4B,EAAOlC,GACnBb,MAAMC,QAAQ8C,EAAOlC,GAAOM,MAC7BkF,EAAYxF,KAAWwF,EAAYxF,GAAS,IAC7CwF,EAAYxF,GAAOM,GAAO,GAC1BgF,EACEpD,EAAOlC,GAAOM,GACdmD,EAAI8B,EAAcvF,IAAU,GAAIM,EAAK,IACrCkF,EAAYxF,GAAOM,GACnBkF,EAAYxF,GACZM,IAGFmD,EAAI8B,EAAcvF,IAAU,GAAIM,KAAS4B,EAAOlC,GAAOM,GACnDT,EAAI2F,EAAYxF,IAAU,GAAIM,GAC7BkF,EAAYxF,UACRwF,EAAYxF,YACdM,IAAM,MAKjBwD,IACG0B,EAAYpF,eACN0D,EAAW2B,GAGtB,OAAOD,EAGT,eACEtD,EACAqD,EACAC,GAEA,OAAAR,EACEM,EAAepD,EAAQqD,EAAeC,GACtCF,EAAeC,EAAerD,EAAQsD,iBCtD1B5G,GAAoC,MAAiB,iBAAVA,eCSzD2D,EACAmD,EACAC,EACAjD,EACAkD,GAKA,IAAMC,EAAS,cAEJC,IAEP5E,EAAY0E,KACXG,GAASH,GACNE,EAAKE,WAAWJ,GAChBzG,MAAMC,QAAQwG,IAAWA,EAAOK,MAAK,SAACtF,GAAS,OAAAmF,EAAKE,WAAWrF,UAEnEkF,EAAOC,GAA2CxD,EAChDC,EACAuD,OACAjF,EACA6B,KAXN,IAAK,IAAMoD,KAAQvD,EAAUK,UAAlBkD,GAgBX,OAAOH,EACHO,EAAsBL,GACtBb,EAAUU,EAAoBQ,EAAsBL,cClClCM,GACtBC,EACAC,EACAC,WAEA,GACEnB,EAAYiB,IACZjB,EAAYkB,IACZD,aAAmB/G,MACnBgH,aAAmBhH,KAEnB,OAAO+G,IAAYC,EAGrB,IAAKE,iBAAqBH,GAAU,CAClC,IAAMI,EAAQzC,OAAOC,KAAKoC,GACpBK,EAAQ1C,OAAOC,KAAKqC,GAE1B,GAAIG,EAAMpG,SAAWqG,EAAMrG,OACzB,OAAO,MAGT,IAAkB,IAAAsG,EAAAC,EAAAH,iCAAO,CAApB,IAAMlG,UACHsG,EAAOR,EAAQ9F,GAErB,IAAMgG,GAAyB,QAARhG,EAAgB,CACrC,IAAMuG,EAAOR,EAAQ/F,GAErB,IACGG,EAASmG,IAASzH,MAAMC,QAAQwH,MAChCnG,EAASoG,IAAS1H,MAAMC,QAAQyH,KAC5BV,GAAUS,EAAMC,EAAMP,GACvBM,IAASC,EAEb,OAAO,sGAMf,OAAO,ECjCT,gBCXgBjI,GAAoC,OAAAA,aAAiBkI,oBCIrDC,GACd,OAAAtG,EAASsG,KAAoBC,GAAQD,GACjCA,EACA,CACEnI,MAAOmI,EACPE,QAAS,iBCTDrI,GACd,MAAiB,mBAAVA,eCGOA,GACd,OAAAmH,GAASnH,IAAU2H,iBAAqB3H,aCDlBsI,GACtBlG,EACAG,EACAW,GAEA,gBAFAA,cAEIqF,GAAUnG,IAAY6D,EAAU7D,KAAYA,EAC9C,MAAO,CACLc,OACAmF,QAASE,GAAUnG,GAAUA,EAAS,GACtCG,OCPN,gBACEqB,EACA4E,EACAC,EACAvF,EACAmF,SAEA,OAAAG,SAESC,EAAO7E,KACV8E,aACMD,EAAO7E,IAAS6E,EAAO7E,GAAO8E,MAAQD,EAAO7E,GAAO8E,MAAQ,YAC/DxF,GAAOmF,IAAW,QAGvB,gBCQJ1E,EACA6E,EACAhF,EAYAK,OAXEtB,QACOvC,cACP6C,YACA8F,aACAC,cACAC,cACAC,QACAC,QACAC,YACAC,iMAkCF,OA9BMrF,EAAwCrB,EAAIqB,KAC5CsF,EAA2C,GAC3CC,EAAU5E,EAAahC,GACvBoC,EAAayE,EAAgB7G,GAC7B8G,EAAoBF,GAAWxE,EAC/B2E,EAAoB,KAAVtJ,EACVuJ,EAAoBC,GAAaC,KACrC,KACA7F,EACA4E,EACAU,GAEIQ,EAAmB,SACvBC,EACAC,EACAC,EACAC,EACAC,gBADAD,EAAU1J,gBACV2J,EAAU3J,GAEV,IAAMiI,EAAUsB,EAAYC,EAAmBC,EAC/CX,EAAMtF,MACJV,KAAMyG,EAAYG,EAAUC,EAC5B1B,UACA9F,OAEIgH,EADAI,EACkBG,EACAC,EADS1B,KAMjCM,KACGQ,IAAYxE,IAAe2E,GAAWhJ,EAAkBN,KACxDiG,EAAUjG,KAAWA,GACrB2E,IAAeC,EAAiB/B,GAASD,SACzCuG,IAAY3E,EAAc3B,GAASD,WAEhCoH,EAAqBzB,GAAUI,GACjC,CAAE3I,QAAS2I,EAAUN,QAASM,GAC9BsB,GAAmBtB,GAFfuB,UAAO7B,YAIX6B,IACFhB,EAAMtF,MACJV,KAAM9C,EACNiI,UACA9F,IAAK8G,IACE1F,EAAUK,QAAQJ,GAAgBf,SAAW,IAAI,IAAM,IAAIN,IAC9DA,GACDgH,EAAkBnJ,EAAiCiI,KAEnDG,OACIU,IAKP5I,EAAkBwI,IAASxI,EAAkByI,IAAmB,KAAV/I,IACtD2J,SACAQ,SACEC,EAAYH,GAAmBlB,GAC/BsB,EAAYJ,GAAmBnB,GAEhChH,MAAM9B,IAUHsK,EACH/H,EAAyB4B,aAAe,IAAI1D,KAAKT,GAChDmH,GAASiD,EAAUpK,SACrB2J,EAAYW,EAAY,IAAI7J,KAAK2J,EAAUpK,QAEzCmH,GAASkD,EAAUrK,SACrBmK,EAAYG,EAAY,IAAI7J,KAAK4J,EAAUrK,UAfvCuK,EACHhI,EAAyB2B,eAAiBsG,WAAWxK,GACnDM,EAAkB8J,EAAUpK,SAC/B2J,EAAYY,EAAcH,EAAUpK,OAEjCM,EAAkB+J,EAAUrK,SAC/BmK,EAAYI,EAAcF,EAAUrK,SAapC2J,IAAaQ,IACfT,IACIC,EACFS,EAAU/B,QACVgC,EAAUhC,QACVjI,EACAA,GAEGoI,QAMLrB,GAASnH,IAAWsJ,IAAYV,IAAaC,IACzC4B,EAAkBR,GAAmBrB,GACrC8B,EAAkBT,GAAmBpB,GACrCc,GACHrJ,EAAkBmK,EAAgBzK,QACnCA,EAAMwB,OAASiJ,EAAgBzK,MAC3BmK,GACH7J,EAAkBoK,EAAgB1K,QACnCA,EAAMwB,OAASkJ,EAAgB1K,OAE7B2J,IAAaQ,IACfT,EACEC,EACAc,EAAgBpC,QAChBqC,EAAgBrC,SAEbG,QAMLQ,GAAYM,IACRqB,EAAmCV,GAAmBjB,GAA7C4B,UAAcvC,aAEzBD,GAAQwC,IAAkBA,EAAalK,KAAKV,KAC9CkJ,EAAMtF,MACJV,KAAM9C,EACNiI,UACA9F,OACGgH,EAAkBnJ,EAAgCiI,IAElDG,KAMLS,GACI9C,GAAa0E,EAAelH,EAAWC,EAAMC,GAC7CiH,GAAczB,GAAqBxG,EAAUA,EAAQ,GAAGN,IAAMA,EAEhEwI,GAAW9B,MACQA,EAAS9C,sBAhDrB+C,UAmDT,OAHM9G,GAAS4I,UACTC,GAAgB3C,GAAiBlG,GAAQ0I,OAG7C5B,EAAMtF,UACDqH,IACA1B,EACDnJ,EACA6K,GAAc5C,WAGbG,MACIU,qBAGFrH,EAASoH,GAAT,aACLiC,GAAmB,4CACeC,GAAApD,EAAA5C,OAAOiG,QAAQnC,wDAA1CoC,GAAAC,cAAC5J,SAAK6J,SACVvF,EAAckF,KAAsB1C,KAIZ+C,GAAiBpF,mBAAxCqF,GAAiBR,UACjBC,GAAgB3C,GACpBkD,GACAV,GACApJ,OAIAwJ,UACKD,IACA1B,EAAkB7H,GAAKuJ,GAAc5C,UAGtCG,IACFU,EAAMtF,GAAQsH,uNAKpB,IAAKlF,EAAckF,MACjBhC,EAAMtF,MACJrB,IAAKuI,IACFI,KAEA1C,GACH,SAAOU,sBAMf,SAAOA,WCzOIuC,GAAU,SACrBC,EACApI,EACAqI,GAEA,IAAK,IAAMC,kBAFXD,MAEuBrI,EAAQ,CAC7B,IAAMuI,EAAYH,GACf7J,EAASyB,GACN,IAAIsI,EACJ,IAAIA,OAEVrF,EAAYjD,EAAOsI,IACfD,EAAMG,KAAKD,GACXJ,GAAQI,EAAUvI,EAAOsI,GAAWD,GAG1C,OAAOA,eCNPI,EACAC,EACAC,EACAC,EACAC,GAKA,IAAInM,OAAQiC,EAYZ,OAVAgK,EAAYG,IAAIJ,GAEXhG,EAAc+F,KACjB/L,EAAQ6E,EAAIkH,EAAaC,IAErBnK,EAAS7B,IAAUO,MAAMC,QAAQR,KACnCyL,GAAQO,EAAWhM,GAAOqM,SAAQ,SAACzI,GAAS,OAAAqI,EAAYG,IAAIxI,OAIzDtB,EAAYtC,GACfmM,EACED,EACArH,EAAIqH,EAAYF,GAClBhM,eCvCUwD,OACd8I,aACAC,eACAC,cACAC,cACAC,uBACAC,yBACAC,gBACAC,gBAaA,oBAEYA,GAAeL,IAChBC,GAAaG,IACbC,EAAcH,EAAqBJ,IACpCM,IACCC,EAAcF,EAAuBJ,IACvCK,gBC5BKhJ,GAAiB,OAAAA,EAAKkJ,UAAU,EAAGlJ,EAAKmJ,QAAQ,OCEnDC,GAAwB,SAACpJ,EAAcqJ,GAClD,OAAA/E,QACE,IAAI+E,eAAsBlM,QAAQ,MAAO,OAAOA,QAAQ,MAAO,QAC/DL,KAAKkD,gBAGPsJ,EACAtJ,GACG,OAAAc,EAAIwI,GAAOC,MAAK,SAACnJ,GAAY,OAAAgJ,GAAsBpJ,EAAMI,OCR9D,O3CgByB,oB2ChBHoJ,Q3CgBG,oB2ChB4BC,kBCC7BC,GAA+BvL,eACjDwL,EAEJ,GAAIhH,EAAYxE,IAAUyL,IAASzL,aAAgB0L,KACjD,OAAO1L,EAGT,GAAIA,aAAgBtB,KAElB,OADA8M,EAAO,IAAI9M,KAAKsB,EAAK2L,WAIvB,GAAI3L,aAAgB4L,IAAK,CACvBJ,EAAO,IAAII,QACX,IAAmB,IAAAC,EAAA7F,EAAAhG,iCAAM,CAApB,IAAMgE,UACTwH,EAAKnB,IAAIrG,qGAEX,OAAOwH,EAGT,GAAIxL,aAAgB8L,IAAK,CACvBN,EAAO,IAAIM,QACX,IAAkB,IAAAlD,EAAA5C,EAAAhG,EAAKqD,sCAAQ,CAA1B,IAAM1D,UACT6L,EAAKtM,IAAIS,EAAK4L,GAAYvL,EAAK8C,IAAInD,uGAErC,OAAO6L,EAKT,IAAK,IAAM7L,KAFX6L,EAAOhN,MAAMC,QAAQuB,GAAQ,GAAK,GAEhBA,EAChBwL,EAAK7L,GAAO4L,GAAYvL,EAAKL,IAG/B,OAAO6L,EClCT,gBACEO,GAOG,OACHC,YAAaD,GAAQA,IAAS3N,EAC9BmM,SAAUwB,IAAS3N,EACnBoM,WAAYuB,IAAS3N,EACrB6N,QAASF,IAAS3N,EAClBqM,UAAWsB,IAAS3N,gBCZNoC,GACd,OAAAgC,EAAahC,IAAQ6G,EAAgB7G,ICuEjC0L,G/C1DmB,oB+C0DQb,OAC3Bc,GAAiBV,GAAQ,UAAWJ,O/C3DjB,oB+C2DiCe,MC1E1D,IAAMC,GAAcC,gBAA2C,MAE/DD,GAAYE,YAAc,iBAEbC,GAAiB,WAG5B,OAAAC,aAAiBJ,mBCPjB,IAAMK,EjDeiB,oBiDddC,YAA4BjO,KAAKkO,MAA4B,IAApBD,YAAYC,MAE9D,MAAO,uCAAuC5N,QAAQ,SAAS,SAAC6N,GAC9D,IAAMC,GAAqB,GAAhBC,KAAKC,SAAgBN,GAAK,GAAK,EAE1C,OAAa,KAALG,EAAWC,EAAS,EAAJA,EAAW,GAAKG,SAAS,QCMrD,gBAAmBjN,EAAWX,GAC5B,OAAAkB,EAAYlB,GACR,GAdN,SAA4BW,EAAWkN,WACjCC,EAAI,EACFC,IAAWpN,OAEjB,IAAoB,IAAAqN,EAAArH,EAAAkH,iCAAS,CAAxB,IAAM7N,UACT+N,EAAKE,OAAOjO,EAAQ8N,EAAG,GACvBA,sGAGF,OAAOpO,EAAQqO,GAAM3N,OAAS2N,EAAO,GAMjCG,CAAgBvN,GAAOxB,MAAMC,QAAQY,GAASA,EAAQ,CAACA,IAAQmO,qBCfnExN,EACAyN,EACAC,GAEA,OAAIlP,MAAMC,QAAQuB,IACZO,EAAYP,EAAK0N,MACnB1N,EAAK0N,QAAMxN,GAEbF,EAAKsN,OAAOI,EAAI,EAAG1N,EAAKsN,OAAOG,EAAM,GAAG,IACjCzN,GAGF,gBCfUA,EAAW2N,EAAgBC,GAC5C,IAAMR,EAAO,CAACpN,EAAK4N,GAAS5N,EAAK2N,IACjC3N,EAAK2N,GAAUP,EAAK,GACpBpN,EAAK4N,GAAUR,EAAK,aCDES,GACtB7N,EACA/B,GAEA,SAAYO,MAAMC,QAAQR,GAASA,EAAQ,CAACA,QAASiC,GAAgBF,YCA/C8N,GACtB9N,EACAX,EACApB,GAEA,SACK+B,EAAKyD,MAAM,EAAGpE,GACbb,MAAMC,QAAQR,GAASA,EAAQ,CAACA,QAASiC,GAC1CF,EAAKyD,MAAMpE,ICdlB,gBAAmBpB,GACjB,OAAAO,MAAMC,QAAQR,GAASO,MAAMP,EAAMwB,QAAQsO,UAAK7N,QAAaA,eCC5CjC,GACjB,OAAEO,MAAMC,QAAQR,GAASA,EAAQ,CAACA,IAAgBuD,KAAI,SAACxB,GACrD,GAAIF,EAASE,GAAO,CAClB,IAAMb,EAAkC,GAExC,IAAK,IAAMQ,KAAOK,EAChBb,EAAOQ,IAAO,EAGhB,OAAOR,EAGT,OAAO,MCeL6O,GAAS,SAIbzM,EACA0M,GAsBA,oBAvBA1M,MAuBOA,EAAOC,KAAI,SAACvD,SAAsC,iBACtDgQ,GAAUC,QACRjQ,gBC/CSkQ,GAQd1M,OACAI,SACAuM,UACAhO,iBACAiO,YACAC,YAKMC,EAAU/B,KAUVvE,EAgBFoG,GAAWE,EAAQF,QAfrBG,qBACAC,aACAC,aACAC,eACAC,YACA7C,SACAnD,mBAAkB+B,uBAAoBC,yBAEpCxB,yBAAW0B,gBAAa+D,YAASnI,WAAQ7B,gBAE3CiK,oBACAC,qBACAnN,cACAoN,uBACAlN,0BAGImN,GAAmBC,GAAmBF,EAAmB/M,QAASJ,GAClEsN,EAAkB,WACtB,OAAC5O,EAAYuC,EAAIhB,EAAsBG,QAASJ,KAAUoN,EACtDnM,EAAIhB,EAAsBG,QAASJ,GACnCtB,EAAYH,GACZ0C,EAAI0L,EAAiBvM,QAASJ,GAC9BzB,GACAgP,EAAA7F,EAA8B8F,WAAeF,QAA5ClR,OAAOqR,OACRC,EAAWC,SAAavR,GACxBuC,EAAMgP,SAAa,CACvBC,MAAO,WAAM,OAAA,QAETC,EAAaF,SACjBlB,cAEQtF,GAAWxI,EAAIyB,QAAQwN,QACzBjP,EAAIyB,QAAQwN,UAadE,EAAiBC,eACrB,SAAC/E,GACC,OAACgF,MACChF,cACAF,qBACAC,uBACAE,cACAJ,YAAa5H,EAAI+L,EAAShN,IACvBkK,MAEP,CACEpB,EACAC,EACAE,EACA+D,EACAhN,EACAkK,IAIE+D,EAAaF,eAAkB,SAACnO,OAC9BzB,WCvGM+P,GACd,OAAAvL,EAAYuL,KACXjQ,EAASiQ,EAAMzL,SACfxE,EAASiQ,EAAMzL,UAAYyL,EAAM5O,KAC9B4O,EACAxP,EAAYwP,EAAMzL,OAAOrG,OACzB8R,EAAMzL,OAAOrD,QACb8O,EAAMzL,OAAOrG,MDgGF+R,CADuBzG,WAIpC,OAFA+F,EAAmBtP,GACnBuP,EAAStN,QAAUjC,EACZA,IACN,IAEGiQ,EAAgBL,eACpB,SAACM,GASKtO,EAAUK,QAAQJ,GACpBD,EAAUK,QAAQJ,MAChBrB,IAAKoB,EAAUK,QAAQJ,GAAOrB,KAC3B4N,IAGLM,EACEtL,OAAO+M,eACL,CACEtO,OACA4N,MAAOC,EAAWzN,SAEpB,QACA,CACE/C,aAAIc,GACFsP,EAAmBtP,GACnBuP,EAAStN,QAAUjC,GAErB8C,eACE,OAAOyM,EAAStN,WAItBmM,GAGF8B,EAAoB3P,EAAYuC,EAAI0L,EAAiBvM,QAASJ,KAGhEqO,GACEjB,GACAK,EAAmBH,OAEvB,CAACf,EAAOvM,EAAM6M,IAGhB0B,aAAgB,WAAM,OAAA,WAAM,OAAAzB,EAAW9M,MAAO,CAACA,IAE/CuO,aAAgB,WAedH,MACC,CAACA,IAEJG,aAAgB,YACbxO,EAAUK,QAAQJ,IAASoO,GAAc,MAG5C,IAAMI,EAAST,eAAkB,WAC3Bb,EAAiB9M,QAAQ4M,UAAY/L,EAAI+L,EAAShN,KACpD3C,EAAI2P,EAAShN,GAAM,GACnBiN,EAAgB,CACdD,aAIJc,GAAe,IAASf,EAAQ/M,KAC/B,CAACA,EAAMiN,EAAiBa,EAAgBf,EAASG,IAWpD,MAAO,CACL/M,MAAO,CACLsO,SAXaV,eACf,eAAC,aAAAW,mBAAAA,IAAAR,kBACC,OAAAtB,EAAS5M,EAAMiO,EAAWC,GAAQ,CAChCJ,eAAgBA,IAChBa,aAAa,MAEjB,CAAC/B,EAAU5M,EAAM8N,IAMfU,SACAxO,OACA5D,QACAuC,OAEFiQ,MAAO,CACLC,SAAU5N,EAAI4D,EAAQ7E,GACtB8O,UAAW7N,EAAI+B,EAAahD,GAC5B6I,YAAa5H,EAAI+L,EAAShN,wBEhNb,SAIjB+O,GAEuEA,QAA/D,IAAOC,EAAwDD,KAApDE,EAAoDF,SAATG,GAASH,eAAAA,UAAAA,YAAAA,EAAjE,6DACE5O,EAAUmM,GAASyC,SAErBI,SACDD,GACA/O,GAGL,OAAO6O,EACHjL,iBAAqBiL,GACnBI,eAAmBJ,EAAIG,GACvBE,gBAAoBL,EAAoBG,GAC1CF,EACAA,EAAO9O,GACP,2BZdsB,SAAmCP,GAC7D,IAAA0P,aACGP,MAF0D,cAGxB,OACrCM,gBAAC7E,GAAY+E,UAASnT,MAAOoT,KAAKT,IAC/BO,gGS6CwB,SAI3B1P,OACA4M,YACAxM,SACAoG,YAAAgG,aAAU,OAKJM,EAAU/B,KAUV8E,EAAgB9B,UAAc,GAC9B5G,EAmBFyF,GAAWE,EAAQF,QAlBrBkD,gBACAC,uBACAC,+BACAzC,uBACApN,cACA4M,qBACAkD,6BACAC,iBACA7P,0BACAgN,oBACAC,qBACA6C,mBACAC,4BACAC,+BACAC,qBACAC,cACAhN,qBACAiN,wBAGIC,EAAuBC,GAAwBtQ,GAC/CuQ,EAAwB5C,WACxB1M,EAAIgP,EAA2B7P,QAASiQ,GACxCpP,EAAIgP,EAA2B7P,QAASJ,EAAM,IAC9CiB,EACEkC,EACIwJ,EAAiBvM,QACjBH,EAAsBG,QAC1BJ,EACA,MAGFuH,EAAAG,EAAsB8F,WAE1BrB,GAAOoE,EAAsBnQ,QAASgM,OAFjCoE,OAAQC,OAGfpT,EAAI+S,EAAoBhQ,QAASJ,EAAMwQ,GAEvC,IAAME,EAAU,SACdF,GACG,OAAAA,EAAO7Q,KAAI,SAACC,gBAAAA,UAAEwG,EAACgG,OAAsC,WAAzC,iCAEjBe,EAAmB/M,QAAQoI,IAAIxI,GAE/B,IAAM2Q,EAAqB5C,eACzB,WAAM,OAAA9M,EAAImP,EAAoBhQ,QAASJ,EAAM,MAC7C,IAGI4Q,EAAyB,WAC7B,OAAA3P,EAAIkP,IAAanQ,EAAM2Q,KAAsBhR,KAC3C,SAACwC,EAAkC3E,GAAkB,cAChDmT,IAAqBnT,IACrB2E,OAITgL,EAAmB/M,QAAQoI,IAAIxI,GAG7BqQ,IACCpP,EAAIgP,EAA2B7P,QAASiQ,IAEzChT,EACE4S,EAA2B7P,QAC3BiQ,EACA3G,GAAYzI,EAAI0L,EAAiBvM,QAASiQ,KAI9C,IAAMQ,EAAwB,SAC5BC,GAKA,GAHAL,EAAUK,GACVzT,EAAI+S,EAAoBhQ,QAASJ,EAAM8Q,GAEnC5D,EAAiB9M,QAAQpB,SAAWkR,EAAkB,CACxD,IAAMxQ,EAASyQ,IACf9S,EAAIqC,EAAQM,EAAM8Q,GAClBZ,EAAiBxQ,KAIfqR,EAAc,WAClB,IAAK,IAAMjT,KAAOiC,EAAUK,QAC1BgJ,GAAsBtL,EAAKkC,IACzB6P,EAAyB9P,EAAUK,QAAQtC,IAAe,IAI1DkT,EAAU,SAAIrS,GAClB,OAACzB,EAAQ+D,EAAItC,EAAKqB,EAAM,KAAKpC,QAAU6D,EAAM9C,EAAKqB,IAE9CiR,EAAqC,SAGzCC,GAEIA,GACF7T,EACEyS,EAAa1P,QAAQ4C,YACrBhD,EACAmR,EACET,EAAQQ,GACRjQ,EAAI0L,EAAiBvM,QAASJ,EAAM,IACpCiB,EAAI6O,EAAa1P,QAAQ4C,YAAahD,EAAM,OAM9CoR,EAAmB,SAIvBC,EACAC,EAMAC,EACAC,EACAC,EACAC,GAEA,gBAJAF,mBACAC,mBACAC,MAEIzQ,EAAIhB,EAAsBG,QAASJ,GAAO,CAC5C,IAAMqD,EAASgO,EACbpQ,EAAIhB,EAAsBG,QAASJ,GACnCsR,EAAKK,KACLL,EAAKM,MAEPH,GAAapU,EAAI4C,EAAsBG,QAASJ,EAAMqD,GAGxD,GAAIpC,EAAIgP,EAA2B7P,QAASJ,GAAO,CAC3CqD,EAASgO,EACbpQ,EAAIgP,EAA2B7P,QAASJ,GACxCsR,EAAKK,KACLL,EAAKM,MAEPH,GAAapU,EAAI4S,EAA2B7P,QAASJ,EAAMqD,GAC3D2N,EAAQf,EAA2B7P,SAGrC,GAAIzD,MAAMC,QAAQqE,EAAI6O,EAAa1P,QAAQyE,OAAQ7E,IAAQ,CACnDqD,EAASgO,EACbpQ,EAAI6O,EAAa1P,QAAQyE,OAAQ7E,GACjCsR,EAAKK,KACLL,EAAKM,MAEPH,GAAapU,EAAIyS,EAAa1P,QAAQyE,OAAQ7E,EAAMqD,GACpD2N,EAAQlB,EAAa1P,QAAQyE,QAG/B,GACEqI,EAAiB9M,QAAQ4M,SACzB/L,EAAI6O,EAAa1P,QAAQ4M,QAAShN,GAClC,CACMqD,EAASgO,EACbpQ,EAAI6O,EAAa1P,QAAQ4M,QAAShN,GAClCsR,EAAKK,KACLL,EAAKM,MAEPH,GAAapU,EAAIyS,EAAa1P,QAAQ4M,QAAShN,EAAMqD,GACrD2N,EAAQlB,EAAa1P,QAAQ4M,SAG/B,GACEE,EAAiB9M,QAAQ4C,aACzBkK,EAAiB9M,QAAQ0O,QACzB,CACMzL,EAASgO,EACbpQ,EAAI6O,EAAa1P,QAAQ4C,YAAahD,EAAM,IAC5CsR,EAAKO,KACLP,EAAKQ,MAEPL,GAAapU,EAAIyS,EAAa1P,QAAQ4C,YAAahD,EAAMqD,GACzD4N,EAAmCM,GACnCP,EAAQlB,EAAa1P,QAAQ4C,aAI7B0O,GACAxE,EAAiB9M,QAAQpB,UACxBkR,IAED7S,EACE0S,EAAe3P,QACfJ,EACAqR,EAAOpQ,EAAI8O,EAAe3P,QAASJ,EAAM,IAAKsR,EAAKK,OAErDX,EAAQjB,EAAe3P,SAEvB/C,EACE2S,EAAwB5P,QACxBJ,EACAqR,EAAOpQ,EAAI+O,EAAwB5P,QAASJ,EAAM,IAAKsR,EAAKK,OAE9DX,EAAQhB,EAAwB5P,UAGlC6M,EAAgB,CACd6B,QAASY,EAAY1P,EAAM0Q,EAAQc,OAoNvC,OAjEAjD,aAAgB,WASd,IAAMxL,EAAgB9B,EAAIgP,EAA2B7P,QAASJ,GAS9D,GAPI+C,GAAiByN,EAAO5S,OAASmF,EAAcnF,SACjDmF,EAAcgP,MACd1U,EAAI4S,EAA2B7P,QAASJ,EAAM+C,IAGhD4M,EAAmB3P,GAEfyP,EAAcrP,SAAW,EAC3B,IAAK,IAAMtC,KAAOiC,EAAUK,QAAS,CACnC,IAAMD,EAAQJ,EAAUK,QAAQtC,GAChC,GACEA,EAAI0F,WAAcxD,MAAQyP,EAAcrP,cACxCD,EAAOxB,IAAIiP,MACX,CACAzN,EAAOxB,IAAIiP,QACX,OAKN6B,EAAcrP,SAAW,IACxB,CAACoQ,EAAQxQ,IAEZuO,aAAgB,WACd,IAAMyD,EAAiBpC,EAA2BxP,QAC5C6R,EAAkB9E,EAAmB/M,QAiB3C,OAfKkQ,GAAwBtQ,KAC3BgS,EAAehS,GAAQ,SACrB7B,GAEA4S,KACC5S,GAAQsD,EAAMwO,EAA2B7P,QAASJ,GACnDyB,EAAMxB,EAAsBG,QAASJ,GACrCuQ,EAAsBnQ,QAAUa,EAC9B9C,GAAQwO,EAAiBvM,QACzBJ,GAEFyQ,EAAUtE,GAAOoE,EAAsBnQ,QAASgM,MAI7C,WAKL2E,WACOiB,EAAehS,GACtByB,EAAM2O,EAAqBpQ,GAC3BiS,EAAgBC,OAAOlS,MAExB,IAEI,CACLmS,KAAMpE,eAxGK,SAACjC,EAAgBC,GAC5B,IAAM5D,EAAcyI,IACpBwB,GAAYjK,EAAa2D,EAAQC,GACjCgF,IACAF,IAA0B1I,IAC1BiJ,EACEgB,GACA,CACET,KAAM7F,EACN8F,KAAM7F,EACN8F,KAAM/F,EACNgG,KAAM/F,QAER1N,EACA8J,GACA,KAyF4B,CAACnI,IAC/BqS,KAAMtE,eAtFK,SAACnC,EAAcC,GAC1B,IAAM1D,EAAcyI,IACpB0B,GAAYnK,EAAayD,EAAMC,GAC/BkF,IACAF,IAA0B1I,IAC1BiJ,EACEkB,GACA,CACEX,KAAM/F,EACNgG,KAAM/F,EACNgG,KAAMjG,EACNkG,KAAMjG,QAERxN,EACA8J,GACA,KAuE4B,CAACnI,IAC/BgM,QAAS+B,eArLK,SACd3R,EACAmW,gBAAAA,MAEA,IAAMC,EAAaC,GAAerW,GAC5B8U,EAA0BwB,GAC9B9B,IACAzE,GAAOxP,MAAMC,QAAQR,GAASA,EAAQ,CAACA,GAAQgQ,IAGjDyE,EAAsBK,GACtBH,IACAK,EACEsB,GACA,CACEf,KAAMa,EACNX,KAAMc,GAAiBvW,IAEzB8U,GAEFzB,EAAcrP,QAAUmS,EAAc,GAAK,IAiKP,CAACvS,IACrC4S,OAAQ7E,eApNK,SACb3R,EACAmW,gBAAAA,MAEA,IAAMM,IACDjC,IACAzE,GAAOxP,MAAMC,QAAQR,GAASA,EAAQ,CAACA,GAAQgQ,IAEpDyE,EAAsBgC,IAGpB3F,EAAiB9M,QAAQ4C,aACzBkK,EAAiB9M,QAAQ0O,WAEzBmC,EAAmC4B,GAEnC5F,EAAgB,CACd6B,SAAS,EACT9L,YAAa8M,EAAa1P,QAAQ4C,gBAIrCG,GACC9F,EAAI4C,EAAsBG,QAASJ,IAC7BiB,EAAIhB,EAAsBG,QAASJ,IAAS,IAChD5D,KAEJqT,EAAcrP,QAAUmS,EAAc/B,EAAO5S,QAAU,IAyLrB,CAACoC,EAAMwQ,IACzCsC,OAAQ/E,eAhKK,SAACvQ,GACd,IAAM2K,EAAcyI,IACdW,EAGAwB,GAAc5K,EAAa3K,GACjCqT,EACEU,GAEFR,IACAK,EACE2B,GACA,CACEpB,KAAMnU,EACNqU,KAAMrU,GAER+T,EACAwB,GAAc5K,EAAa3K,IAC3B,GACA,KA6IgC,CAACwC,IACnCiM,OAAQ8B,eA1IK,SACbvQ,EACApB,EACAmW,gBAAAA,MAEA,IAAMC,EAAaC,GAAerW,GAC5B+L,EAAcyI,IACdM,EAA0B8B,GAC9B7K,EACA3K,EACA2O,GAAOxP,MAAMC,QAAQR,GAASA,EAAQ,CAACA,GAAQgQ,IAGjDyE,EAAsBK,GACtBH,IACAK,EACE4B,GACA,CACErB,KAAMnU,EACNoU,KAAMY,EACNX,KAAMrU,EACNsU,KAAMa,GAAiBvW,IAEzB8U,EACA8B,GAAS7K,EAAa3K,IAExBiS,EAAcrP,QAAUmS,EAAc/U,GAAS,IAgHb,CAACwC,IACnCwQ,oCV1aF5Q,GAHF,WAGEwG,aAS0C,KAR1CW,SAAAmD,aAAO3N,IACPgL,mBAAA0L,aAAiB1W,IACjB2W,aACAC,YACA5F,kBAAAxK,aAAgB,KAChB0E,qBAAA2L,gBACAC,qBAAAlQ,gBACAmQ,iBAEMvT,EAAY4N,SAAsC,IAClDsC,EAA6BtC,SAAsC,IACnEyC,EAAsBzC,SAAsC,IAC5D4F,EAAiB5F,SAA4C,IAAI5D,KACjEyJ,GAAoB7F,SACxB,IAEI8F,GAA6B9F,SAAsC,IACnEqC,GAA0BrC,SAE9B,IACIoC,GAAiBpC,SACrB,IAEIhB,GAAmBgB,SACvB5K,GAEI2Q,GAA2B/F,SAE/B,IACIgG,GAAYhG,UAAa,GACzBiG,GAAgBjG,UAAa,GAC7BkG,GAAkBlG,WAClB1N,GAAwB0N,SAAa,IACrCiC,GAA6BjC,SAEjC,IACImG,GAAanG,SAAawF,GAC1BY,GAAcpG,SAAauF,GAC3B/F,GAAqBQ,SACzB,IAAI5D,KAEAiK,GAAUrG,SAAasG,GAAY/J,IACnC9C,GAA4B4M,GAAQ5T,QAAlC+J,iBAAYvB,gBACdsL,GAA6BZ,IAAiB/W,EAC9C4X,GAAAzM,EAA4B8F,WAAwC,CACxEsB,SAAS,EACT9L,YAAa,GACbiG,aAAa,EACbmL,YAAa,EACbpH,QAAS,GACTqH,cAAc,EACdC,oBAAoB,EACpBtV,SAAUmL,GACVtF,OAAQ,QATH0P,SAAWC,SAWZtH,GAAmBS,SAA4B,CACnDmB,SAAUxE,GACVtH,aAAcsH,GACd0C,SAAU1C,IAAkB1B,GAC5ByL,cAAe/J,GACftL,SAAUsL,KAENwF,GAAenC,SAAa4G,IAC5BE,GAAc9G,WACd+G,GAGF/G,SAAasG,GAAYhB,IAAiB7S,QAFlC0I,eACEC,iBAGd+K,GAAW1T,QAAU+S,EACrBY,GAAY3T,QAAU8S,EACtBpD,GAAa1P,QAAUmU,GACvBtU,GAAsBG,QAAU+C,EAC5B,GACAf,EAAcnC,GAAsBG,SACpCsJ,GAAY3G,GACZ9C,GAAsBG,QAE1B,IAAM6M,GAAkBc,eACtB,SAACa,gBAAAA,MACM+E,GAAUvT,UACb0P,GAAa1P,eACR0P,GAAa1P,SACbwO,GAEL4F,GAAa1E,GAAa1P,YAG9B,IAGIuU,GAA0B5G,eAC9B,SACE/N,EACAsF,EACAsP,EACAhG,EAKA5P,gBANA4V,mBACAhG,MAOA,IAAIiG,EACFD,YjBhL0ChV,OAChDiF,WACA7E,SACAsF,UACAwP,gBACAC,yBAQM/V,EAAUN,EAAY4G,GACtB0P,EAAgB/T,EAAI4D,EAAQ7E,GAElC,OACGhB,KAAagW,IACZhW,IAAY2E,GAAUqR,EAAe1P,GAAO,IAC7CtG,GAAWiC,EAAI8T,EAAsB/U,KAAUiB,EAAI6T,EAAa9U,GiB8J7DiV,CAAkC,CAChCpQ,OAAQiL,GAAa1P,QAAQyE,OAC7BS,QACAtF,OACA8U,YAAa/E,GAAe3P,QAC5B2U,qBAAsB/E,GAAwB5P,UAE5C4U,EAAgB/T,EAAI6O,GAAa1P,QAAQyE,OAAQ7E,GAEnDsF,GACF7D,EAAMsO,GAAe3P,QAASJ,GAC9B6U,EACEA,IACCG,IACArR,GAAUqR,EAAe1P,GAAO,GACnCjI,EAAIyS,GAAa1P,QAAQyE,OAAQ7E,EAAMsF,MAEnCrE,EAAI+O,GAAwB5P,QAASJ,IAAS+T,GAAY3T,WAC5D/C,EAAI0S,GAAe3P,QAASJ,GAAM,GAClC6U,EAAiBA,GAAkBG,GAGrCvT,EAAMqO,GAAa1P,QAAQyE,OAAQ7E,KAIlC6U,IAAmBnY,EAAkBkY,KACrCxS,EAAcwM,KAEf3B,UACK2B,GACCmF,GAAY3T,QAAU,CAAEpB,UAAWA,GAAY,OAIzD,IAGIkW,GAAgBnH,eACpB,SAAC/N,EAA+BmV,GACxB,IAAAvV,EAAmBG,EAAUK,QAAQJ,GAAnCrB,QAAKM,YACP7C,EACJwN,IAAS/K,EAAcF,IAAQjC,EAAkByY,GAC7C,GACAA,EAEFxU,EAAahC,IACdM,GAAW,IAAIwJ,SACd,SAAC7I,OAAOwV,QACN,OAACA,EAAShW,QAAUgW,EAAShZ,QAAUA,KAElCqE,EAAY9B,KAAS4E,GAASnH,GACvCuC,EAAI+B,MAAQtE,EACHyE,EAAiBlC,GAC1BmC,EAAInC,EAAIM,SAASwJ,SACf,SAAC4M,GACC,OAACA,EAAUC,SAAYlZ,EAAmBmZ,SACxCF,EAAUjZ,UAGPoJ,EAAgB7G,IAAQM,EACjCA,EAAQrB,OAAS,EACbqB,EAAQwJ,SACN,SAAC7I,OAAO4V,QACN,OAACA,EAAYpW,QAAUzC,MAAMC,QAAQR,KAC9BA,EAAaqH,MACd,SAACtF,GAAiB,OAAAA,IAASqX,EAAYpZ,SAEzCA,IAAUoZ,EAAYpZ,SAE7B6C,EAAQ,GAAGN,IAAIS,UAAYhD,EAEhCuC,EAAIvC,MAAQA,IAGhB,IAGIsT,GAAc3B,eAClB,SAAC/N,EAAe7B,GACd,GAAI+O,GAAiB9M,QAAQ0O,QAAS,CACpC,IAAM2G,EAAatF,KAInB,OAFAnQ,GAAQ7B,GAAQd,EAAIoY,EAAYzV,EAAM7B,IAE9BwF,GACN8R,EACArT,EAAcuK,GAAiBvM,SAC3BsT,GAAyBtT,QACzBuM,GAAiBvM,SAIzB,OAAO,IAET,IAGIsV,GAAyB3H,eAC7B,SACE/N,EACA4U,GAIA,gBAJAA,MAKE1H,GAAiB9M,QAAQ0O,SACzB5B,GAAiB9M,QAAQ4C,YACzB,CACA,IAAM2S,GAAgBhS,GACpB1C,EAAIyS,GAAyBtT,QAASJ,GACtCF,EAAcC,EAAWC,EAAMC,KAE3B2V,EAAoB3U,EAAI6O,GAAa1P,QAAQ4C,YAAahD,GAC1D6V,EAAkB/F,GAAa1P,QAAQ0O,QAE7C6G,EACItY,EAAIyS,GAAa1P,QAAQ4C,YAAahD,GAAM,GAC5CyB,EAAMqO,GAAa1P,QAAQ4C,YAAahD,GAE5C,IAAM4O,EAAQ,CACZE,QAASY,KACT1M,YAAa8M,GAAa1P,QAAQ4C,aAG9B8S,EACH5I,GAAiB9M,QAAQ0O,SACxB+G,IAAoBjH,EAAME,SAC3B5B,GAAiB9M,QAAQ4C,aACxB4S,IAAsB3U,EAAI6O,GAAa1P,QAAQ4C,YAAahD,GAIhE,OAFA8V,GAAalB,GAAgB3H,GAAgB2B,GAEtCkH,EAAYlH,EAAQ,GAG7B,MAAO,KAET,IAGImH,GAAoBhI,eACxB,SACE/N,EACAgW,gGAUE,SAAMC,GACJlW,EACAmU,GACAnU,EAAUK,QAAQJ,GAClBC,YAMJ,OAXMqF,EACJ1F,SAMAI,GAEF2U,GAAwB3U,EAAMsF,EAAO0Q,MAE9BtX,EAAY4G,aAErB,CAACqP,GAAyBT,KAGtBgC,GAAoCnI,eACxC,SACEzE,sGAImB,SAAMyK,GAAY3T,QACnC+P,KACA2D,GAAW1T,QACX8T,YAIF,OAPQrP,EAAWjF,gBAKbuW,EAAsBrG,GAAa1P,QAAQpB,QAE7CrC,MAAMC,QAAQ0M,IACV8M,EAAgB9M,EACnB3J,KAAI,SAACK,GACJ,IAAMsF,EAAQrE,EAAI4D,EAAQ7E,GAM1B,OAJAsF,EACIjI,EAAIyS,GAAa1P,QAAQyE,OAAQ7E,EAAMsF,GACvC7D,EAAMqO,GAAa1P,QAAQyE,OAAQ7E,IAE/BsF,KAET+Q,MAAMrZ,SAETiQ,GAAgB,CACdjO,QAASoD,EAAcyC,QAGlBuR,KAED9Q,EAAQrE,EAAI4D,EAAQyE,GAE1BqL,GACErL,EACAhE,EACA6Q,IAAwB/T,EAAcyC,GACtC,GACAzC,EAAcyC,QAGRS,aAGZ,CAACqP,GAAyBT,KAGtBnH,GAAUgB,eACd,SACE/N,yGAIA,OAFMwQ,EAASxQ,GAAQuB,OAAOC,KAAKzB,EAAUK,SAEzC2T,GAAY3T,WACP8V,GAAkC1F,IAGvC7T,MAAMC,QAAQ4T,KACfxQ,IAAS8P,GAAa1P,QAAQyE,OAAS,OACnByR,QAAQC,IAC3B/F,EAAO7Q,KAAI,SAAOxB,0FAAS,SAAM4X,GAAkB5X,EAAM,cAA9B,SAAAyB,oCAG7B,OAJMpB,EAASoB,SAGfqN,QACOzO,EAAO6X,MAAMrZ,iBAGf,SAAM+Y,GAAkBvF,WAA/B,SAAO5Q,mBAET,CAACsW,GAAmCH,KAGhCS,GAAoBzI,eACxB,SACE/N,EACA5D,EACAwD,WAAE+O,gBAAab,mBAET3P,EAAO,GACbd,EAAIc,EAAM6B,EAAM5D,OAEhB,IAAwB,IAAA2K,EAAA5C,EAAA0D,GAAQ7H,EAAM5D,kCAAQ,CAAzC,IAAMgM,UACLrI,EAAUK,QAAQgI,KACpB8M,GAAc9M,EAAWnH,EAAI9C,EAAMiK,IACnCuG,GAAe+G,GAAuBtN,GACtC0F,GAAkBf,GAAQ3E,yGAIhC,CAAC2E,GAASmI,GAAeQ,KAGrBe,GAAmB1I,eACvB,SACE/N,EACA5D,EACAsa,YAEC/T,EAAYvG,IAAUiB,EAAI4C,GAAsBG,QAASJ,EAAM5D,GAE5D2D,EAAUK,QAAQJ,IACpBkV,GAAclV,EAAM5D,GACpBsa,EAAO/H,aAAe+G,GAAuB1V,GAC7C0W,EAAO5I,gBAAkBf,GAAQ/M,IACvB2C,EAAYvG,KACtBoa,GAAkBxW,EAAM5D,EAAOsa,GAE3BvJ,GAAmB/M,QAAQuW,IAAI3W,KACjCiQ,EAA2B7P,QAAQJ,GAAQ5D,EAC3CwT,GAA2BxP,QAAQJ,KAAMJ,MACtCI,GAAO5D,OAIP8Q,GAAiB9M,QAAQ0O,SACxB5B,GAAiB9M,QAAQ4C,cAC3B0T,EAAO/H,cAEPtR,EACEyS,GAAa1P,QAAQ4C,YACrBhD,EACAmR,EACE/U,EACA6E,EAAI0L,GAAiBvM,QAASJ,EAAM,IACpCiB,EAAI6O,GAAa1P,QAAQ4C,YAAahD,EAAM,MAIhDiN,GAAgB,CACd6B,SAAUnL,UACHwM,cAAcnQ,GAAO5D,MAC1BuQ,GAAiBvM,eAO1B+C,GAAoB9F,EAAI4C,GAAsBG,QAASJ,EAAM5D,KAEhE,CAACsZ,GAAwBR,GAAesB,KAGpCI,GAAiB,SAAoC5W,GACzD,OAAA4T,GAAcxT,SACdmT,EAAenT,QAAQuW,IAAI3W,IAC3BuT,EAAenT,QAAQuW,KAAK3W,EAAK6W,MAAM,QAAU,IAAI,KAEjDC,GAAsB,SAC1B9W,EACA+W,GAEA,gBAFAA,OAEK3U,EAAcoR,GAAkBpT,SACnC,IAAK,IAAMtC,KAAO0V,GAAkBpT,QAE/BJ,GACAwT,GAAkBpT,QAAQtC,GAAKkZ,OAChCxD,GAAkBpT,QAAQtC,GAAK6Y,IAAI3W,KACnCwT,GAAkBpT,QAAQtC,GAAK6Y,IAAIM,GAAkBjX,MAErDyT,GAA2BrT,QAAQtC,KACnCiZ,GAAQ,GAKd,OAAOA,GAiHT,SAASG,GAAkD/Y,aACzD,IAAKgF,EAAkB,CACrB,IAAIwG,EAAOD,GAAYvL,OAEvB,IAAoB,IAAA4I,EAAA5C,EAAAgJ,GAAmB/M,uCAAS,CAA3C,IAAMhE,UACLsB,EAAMtB,KAAWuN,EAAKvN,KACxBuN,SACKA,WACFvN,GAAQ,0GAKf,OAAOuN,EAET,OAAOxL,EAYT,SAASgS,GAAUgH,WACjB,GAAI5T,GAAS4T,GACX,OAAOrX,EAAcC,EAAWoX,EAASlX,IAG3C,GAAItD,MAAMC,QAAQua,GAAU,CAC1B,IAAMhZ,EAAO,OAEb,IAAmB,IAAAiZ,EAAAjT,EAAAgT,iCAAS,CAAvB,IAAM7T,UACTjG,EAAIc,EAAMmF,EAAMxD,EAAcC,EAAWuD,EAAMrD,uGAGjD,OAAO9B,EAGT,OAAO+Y,GACLG,GACEtX,EACA2J,GAAYzJ,GAAsBG,SAClC+C,IAlJN0Q,GAAgBzT,QAAUyT,GAAgBzT,QACtCyT,GAAgBzT,QAChB,SAAOR,OAAEN,SAAMmD,qIACTzC,EAAQyC,EAAgBzC,MACtBG,EAAQJ,EAAUK,QAAQJ,KAMxBsX,EAAuBtJ,MAC3BhF,YAFIA,EAAc1J,IAAShD,EAG3ByM,wBACAD,sBACAD,YAAa5H,EAAI6O,GAAa1P,QAAQ4M,QAAShN,GAC/CiJ,YAAa6G,GAAa1P,QAAQ6I,aAC/B+K,GAAQ5T,UAETwO,EAAQ8G,GAAuB1V,GAAM,GACrC4U,GACDxS,EAAcwM,IACfgI,GAAe5W,GAGfgJ,IACC/H,EAAI6O,GAAa1P,QAAQ4M,QAAShN,IACnCkN,GAAiB9M,QAAQ4M,UAEzB3P,EAAIyS,GAAa1P,QAAQ4M,QAAShN,GAAM,GACxC4O,SACKA,IACH5B,QAAS8C,GAAa1P,QAAQ4M,YAI7B7J,GAAoBqC,EAAgB/C,IACvCpF,EACE4C,GAAsBG,QACtBJ,EACAF,EAAcC,EAAWC,IAIzBsX,GACFR,GAAoB9W,QAEhBoC,EAAcwM,IACbgG,GAAgBxS,EAAcwM,KACjC3B,GAAgB2B,KAIhBmF,GAAY3T,WACW2T,GAAY3T,QACnC+P,KACA2D,GAAW1T,QACX8T,gCAHMrP,EAAWuB,gBAKb+P,EAAsBrG,GAAa1P,QAAQpB,QACjDsG,EAAQrE,EAAI4D,EAAQ7E,GAGlBwF,EAAgB/C,KACf6C,GACDyO,GAAY3T,UAENmX,EAAiBN,GAAkBjX,IACnCwX,EAAevW,EAAI4D,EAAQ0S,EAAgB,KACpCjY,MACXkY,EAAa/S,UACZa,EAAQkS,GAGTD,IACCC,GACCvW,EAAI6O,GAAa1P,QAAQyE,OAAQ0S,MAEnCvX,EAAOuX,IAIXvY,EAAUoD,EAAcyC,GAExBsR,IAAwBnX,IAAY4V,GAAe,gBAGjD,SAAMqB,GACJlW,EACAmU,GACA/T,EACAF,YALJqF,EACEc,SAMApG,oBAGJ8W,GAAoB9W,GACpB2U,GAAwB3U,EAAMsF,EAAOsP,EAAchG,EAAO5P,sCAuDlE,IAAMkR,GAAmBnC,eACvB,SAAOrO,uBAAAA,8FACc,SAAMqU,GAAY3T,eAE9B+P,MACAzQ,GAELoU,GAAW1T,QACX8T,mBANMrP,EAAWjF,gBAQbZ,EAAUoD,EAAcyC,GAE9BiL,GAAa1P,QAAQpB,UAAYA,GAC/BiO,GAAgB,CACdjO,yBAGN,CAACkV,KAGGrE,GAA2B9B,eAC/B,SAAC5N,EAAcsX,GACb,gBxBnrBJ1X,EACA2X,EACAvX,EACAF,EACAkD,EACAsU,GAGE,IAAA9Y,EAEEwB,MADKH,EACLG,WACEwX,EAAW5X,EAAUK,QAAQJ,GAEnC,IAAKmD,EAAkB,CACrB,IAAM/G,EAAQ0D,EAAcC,EAAWC,EAAMC,IAE5CvB,EAAYtC,IAAUiB,EAAI4C,EAAsBG,QAASJ,EAAM5D,GAG7DuC,EAAIW,MAASqY,EAKdhX,EAAahC,IAAQ6G,EAAgB7G,GACnChC,MAAMC,QAAQ+a,EAAS1Y,UAAY0Y,EAAS1Y,QAAQrB,QACtDV,EAAQya,EAAS1Y,SAASwJ,SAAQ,SAACtJ,EAAa3B,gBAAb2B,OAE9B+B,EAAW/B,EAAOR,MAAQ2D,EAAUnD,EAAQA,EAAOR,MACpD8Y,KAEAG,EAAwBzY,EAAOR,IAAK+Y,GACpCjW,EAAMkW,EAAS1Y,QAAS,IAAIzB,WAI5Bma,EAAS1Y,UAAY/B,EAAQya,EAAS1Y,SAASrB,eAC1CmC,EAAUK,QAAQJ,WAGpBD,EAAUK,QAAQJ,IAEjBkB,EAAWvC,IAAQ2D,EAAUqV,EAAUhZ,IAAS8Y,KAC1DG,EAAwBjZ,EAAK+Y,UAEtB3X,EAAUK,QAAQJ,WAzBlBD,EAAUK,QAAQJ,GwB+pBvB6X,CACE9X,EACA8T,GAAgBzT,QAChBD,EACAF,GACAkD,EACAsU,KAEJ,CAACtU,IAGGwM,GAAqB5B,eAAkB,SAAC/N,WAC5C,GAAI4T,GAAcxT,QAChB6M,SACK,KACL,IAAyB,IAAA7G,EAAAjC,EAAAoP,EAAenT,uCAAS,CAC/C,WAAeoD,WAAWxD,GAAO,CAC/BiN,KACA,yGAIJ6J,GAAoB9W,MAErB,IAEG8X,GAAiC/J,eACrC,SAAC5N,EAAesX,GACVtX,IACF0P,GAAyB1P,EAAOsX,GAE5BtU,IAAqBjG,EAAQiD,EAAMlB,SAAW,IAAIrB,SACpD6D,EAAMiS,GAAyBtT,QAASD,EAAMxB,IAAIqB,MAClDyB,EAAMsO,GAAe3P,QAASD,EAAMxB,IAAIqB,MACxCyB,EAAMuO,GAAwB5P,QAASD,EAAMxB,IAAIqB,MACjDyB,EAAMqO,GAAa1P,QAAQyE,OAAQ1E,EAAMxB,IAAIqB,MAC7C3C,EAAIyS,GAAa1P,QAAQ4C,YAAa7C,EAAMxB,IAAIqB,MAAM,GAEtDiN,GAAgB,CACd6B,QAASY,OAGXxC,GAAiB9M,QAAQpB,SACvB+U,GAAY3T,SACZ8P,KACFP,GAAmBxP,EAAMxB,IAAIqB,UAInC,CAACkQ,GAAkBL,KAiCfkI,GAAgBhK,eACpB,SAAIiK,EAAgCzZ,EAAkB0Z,GACpD,IAAM5P,EAAc4P,EAChBzE,GAAkBpT,QAAQ6X,GAC1B1E,EAAenT,QACf+H,EAAckP,GAChBtX,EACA2J,GAAYzJ,GAAsBG,SAClC+C,GACA,EACA6U,GAGF,GAAIzU,GAASyU,GAAa,CACxB,GAAI7K,GAAmB/M,QAAQuW,IAAIqB,GAAa,CAC9C,IAAME,EAAkBjX,EACtBmP,EAAoBhQ,QACpB4X,EACA,IAEF7P,EACG+P,EAAgBta,QACjBsa,EAAgBta,SACdV,EAAQ+D,EAAIkH,EAAa6P,EAAY,KAAKpa,OAExCuK,EADAiI,EAAoBhQ,QAI5B,OAAO+X,GACLhQ,EACA6P,EACA3P,EACA3J,EAAYuC,EAAI0L,GAAiBvM,QAAS4X,IACtCzZ,EACA0C,EAAI0L,GAAiBvM,QAAS4X,IAClC,GAIJ,IAAMI,EAAwB1Z,EAAYH,GACtCoO,GAAiBvM,QACjB7B,EAEJ,OAAI5B,MAAMC,QAAQob,GACTA,EAAWvZ,QAChB,SAACS,EAAUc,SAAS,cACfd,WACFc,GAAOmY,GACNhQ,EACAnI,EACAqI,EACA+P,SAKJ,KAIJxE,GAAcxT,QAAU1B,EAAYuZ,GAE7BvU,GACHtB,EAAc+F,IAAgBA,GAC7BiQ,MAGP,IAoCF,SAASC,GACP1Z,EACAM,gBAAAA,MA2BQ,IAYJV,EAZIyB,EAAsBrB,OAAhBW,EAAgBX,OAAVvC,EAAUuC,QACxB2Z,KACJ3Z,OACGM,GAECuR,EAASzQ,EAAUK,QACnBqF,EAAoB8S,GAA0B5Z,GAC9C6Z,EAAenL,GAAmBF,GAAmB/M,QAASJ,GAC9DyY,EAAa,SAACC,GAClB,OAAA9O,MAAW/K,EAAcF,IAAQ+Z,IAAe/Z,IAC9CwB,EAAQqQ,EAAOxQ,GACf2Y,GAAsB,EAG1B,GACExY,IACCsF,EACG9I,MAAMC,QAAQuD,EAAMlB,UACpB/B,EAAQiD,EAAMlB,SAASwE,MAAK,SAACtE,GAC3B,OAAO/C,IAAU+C,EAAOR,IAAIvC,OAASqc,EAAWtZ,EAAOR,QAEzD8Z,EAAWtY,EAAMxB,MAErB6R,EAAOxQ,UACFG,GACAlB,OAXP,CAiBEkB,EADEb,EACMmG,KAEFxG,UACK/B,EAASiD,GAASA,EAAMlB,SAAY,KACvC,CACEN,SAGJA,IAAK,CAAEW,OAAMU,SACVf,QAGAqZ,GAGDA,EAGV9H,EAAOxQ,GAAQG,EAEf,IAAMyY,EAAuBla,EAC3BuC,EAAIhB,GAAsBG,QAASJ,IAsCrC,GAnCKoC,EAAcuK,GAAiBvM,UAAawY,IAC/Cra,EAAe0C,EACb2X,EACIjM,GAAiBvM,QACjBH,GAAsBG,QAC1BJ,IAEF2Y,EAAsBja,EAAYH,KAELia,GAC3BtD,GAAclV,EAAiCzB,IAI9C6D,EAAcnD,KACjB5B,EAAI2S,GAAwB5P,QAASJ,GAAM,IAEtCmK,IAAc+C,GAAiB9M,QAAQpB,SAC1CiX,GACElW,EACAmU,GACA/T,EACAF,IACA4Y,MAAK,SAACvT,GACN,IAAM6Q,EAAsBrG,GAAa1P,QAAQpB,QAEjDoD,EAAckD,GACVjI,EAAI0S,GAAe3P,QAASJ,GAAM,GAClCyB,EAAMsO,GAAe3P,QAASJ,GAElCmW,IAAwB/T,EAAckD,IAAU2H,WAMnDyG,GAAyBtT,QAAQJ,IAChCwY,GAAgBG,GAClB,CACA,IAAMpW,EAAazC,EAAcC,EAAWC,EAAMC,IAClD5C,EACEqW,GAAyBtT,QACzBJ,EACA2Y,EACI1a,EAASsE,QACFA,GACLA,EACFhE,IAELia,GAAgB/W,EAAMqO,GAAa1P,QAAQ4C,YAAahD,GAGvDV,YcjgCNM,EACAkZ,EACApB,OAFE/Y,QAIEE,EAAcF,IAAQ+Y,IACxB/Y,EAAIoa,iBACFD,EAA0Bxc,EAAgBA,EAC1Cob,GAEF/Y,EAAIoa,iBAAiBzc,EAAaob,Idy/BhCsB,CACEvT,GAAqBtF,EAAMlB,QACvBkB,EAAMlB,QAAQkB,EAAMlB,QAAQrB,OAAS,GACrCuC,EACJsF,GevgCclG,efugCqBZ,EevgCjCW,KfwgCFuU,GAAgBzT,UAuCtB,IAAM6Y,GAAelL,eACnB,SACEmL,EACAC,GACG,OAAA,SAAOC,wHACNA,GAAKA,EAAEC,iBACTD,EAAEC,iBACFD,EAAEE,WAEAC,EAAyC,GACzCpR,EAAc+O,GAChBG,GACEtX,EACA2J,GAAYzJ,GAAsBG,SAClC+C,GACA,IAIJ+J,GAAiB9M,QAAQiU,cACvBpH,GAAgB,CACdoH,cAAc,oDAIZN,GAAY3T,WACmB2T,GAAY3T,QAC3C+H,EACA2L,GAAW1T,QACX8T,yBAHItU,EAAqB6H,SAAnB5C,WAAQnF,WAKhBoQ,GAAa1P,QAAQyE,OAAS0U,EAAc1U,EAC5CsD,EAAczI,wCAEM0G,EAAAjC,EAAA5C,OAAO7B,OAAOK,EAAUK,2DAAjCD,YAECqZ,EAASrZ,EAAMxB,YAEEsX,GACvBlW,EACAmU,GACA/T,EACAF,oBAJIwZ,EAAahS,UAOJ+R,IACbnc,EAAIkc,EAAaC,EAAMC,EAAWD,IAClC/X,EAAMsO,GAAe3P,QAASoZ,IACrBvY,EAAI+O,GAAwB5P,QAASoZ,KAC9C/X,EAAMqO,GAAa1P,QAAQyE,OAAQ2U,GACnCnc,EAAI0S,GAAe3P,QAASoZ,GAAM,gNAOxCpX,EAAcmX,IACdhY,OAAOC,KAAKsO,GAAa1P,QAAQyE,QAAQwR,OACvC,SAACrW,GAAS,OAAAA,KAAQD,EAAUK,YAG9B6M,GAAgB,CACdpI,OAAQ,GACRwP,cAAc,OAEV6E,EAAQ/Q,EAAaiR,2BAA3B3R,+BAEAqI,GAAa1P,QAAQyE,cAChBiL,GAAa1P,QAAQyE,QACrB0U,GAELJ,KAAoBA,EAAUrJ,GAAa1P,QAAQyE,OAAQuU,mBAA7C3R,4BACd2L,YgBvnCR5C,EACA+I,GAEA,IAAK,IAAMzb,KAAO0S,EAChB,GAAIvP,EAAIsY,EAAazb,GAAM,CACzB,IAAMqC,EAAQqQ,EAAO1S,GAErB,GAAIqC,EAAO,CACT,GAAIA,EAAMxB,IAAIiP,OAASlP,EAAYyB,EAAMxB,IAAIiP,SAC3C,MACK,GAAIzN,EAAMlB,QAAS,CACxBkB,EAAMlB,QAAQ,GAAGN,IAAIiP,QAErB,ShB2mCE8L,CAAkB3Z,EAAUK,QAAS0P,GAAa1P,QAAQyE,uDAG9DiL,GAAa1P,QAAQiU,cAAe,EACpCpH,GAAgB,CACdhE,aAAa,EACboL,cAAc,EACdC,mBAAoBlS,EAAc0N,GAAa1P,QAAQyE,QACvDuP,YAAatE,GAAa1P,QAAQgU,YAAc,oCAItD,CAAChB,EAAkBc,KAyErB3F,aAAgB,WACd2E,GAAYhG,GAAiB9M,QAAQpB,SAAWkR,KAChDuE,GAAYrU,QACVqU,GAAYrU,UAAYwJ,GACpB6K,GAAYrU,iBiBjtCpBL,EACA+X,GAKA,IAAM6B,EAAW,IAAIC,kBAAiB,2BACpC,IAAoB,IAAA7S,EAAA5C,EAAA5C,OAAO7B,OAAOK,EAAUK,wCAAU,CAAjD,IAAMD,UACT,GAAIA,GAASA,EAAMlB,YACjB,IAAqB,IAAAsO,YAAApJ,EAAAhE,EAAMlB,wCAAS,CAA/B,IAAME,UACLA,GAAUA,EAAOR,KAAOuC,EAAW/B,EAAOR,MAC5CmZ,EAA+B3X,0GAG1BA,GAASe,EAAWf,EAAMxB,MACnCmZ,EAA+B3X,yGAUrC,OALAwZ,EAASE,QAAQrQ,OAAOC,SAAU,CAChCqQ,WAAW,EACXC,SAAS,IAGJJ,EjByrCCK,CAAYja,EAAW+X,MAC5B,CAACA,GAAgCnL,GAAiBvM,UAErDmO,aACE,WAAM,OAAA,WACJkG,GAAYrU,SAAWqU,GAAYrU,QAAQ6Z,aAM3CtG,GAAUvT,SAAU,EACpBmB,OAAO7B,OAAOK,EAAUK,SAASqI,SAAQ,SAACtI,GACxC,OAAA2X,GAA+B3X,GAAO,SAG1C,KAGG+S,GAAYhG,GAAiB9M,QAAQpB,UACxCuV,GAAUvV,QACR2E,GAAUoM,GAAe3P,QAAS4P,GAAwB5P,UAC1DgC,EAAc0N,GAAa1P,QAAQyE,SAGvC,IAAMqV,GAAc,CAClBnN,WACAH,SAAUmB,eApuBZ,SACE/N,EACA5D,EACAsa,GAEAD,GAAiBzW,EAAM5D,EAAOsa,GAAU,IACxCE,GAAe5W,IAASiN,KACxB6J,GAAoB9W,KA6tBkB,CAACyW,GAAkB1J,KACzDoD,UAAWpC,cAAkBoC,GAAW,IACxCtD,SAAUkB,eAxNZ,SACEoM,EAKAlb,GAEA,IAAKoL,GACH,GAAI9G,GAAS4W,GACX9B,GAAiB,CAAErY,KAAMma,GAAwBlb,OAC5C,CAAA,IACLhB,EAASkc,MACT,SAAUA,GAIV,OAAO,SAACxb,GACN,OAAAA,GAAO0Z,GAAiB1Z,EAAKwb,IAH/B9B,GAAiB8B,EAAsBlb,MAyML,CAAC0N,GAAiBvM,UACxD0M,WAAYiB,eA/Xd,SACE/N,eAEA,IAAwB,IAAAoG,EAAAjC,EAAAxH,MAAMC,QAAQoD,GAAQA,EAAO,CAACA,kCAAO,CAAxD,IAAMoI,UACT0P,GAA+B/X,EAAUK,QAAQgI,IAAY,wGA2XrB,KAGtCoE,GAAU4N,WACd,WAAM,UACJ1K,eACAC,sBACAxM,mBACA8J,mBACA4C,4BACAkI,iBACA7N,KAAM8J,GAAQ5T,QACd6S,eAAgB,CACdnK,sBACAC,yBAEFmH,iBAAkBgD,EAAWhD,QAAmB7R,EAChD0B,YACA6P,8BACA4D,qBACAC,8BACAxD,6BACAF,kBACAC,2BACA7C,sBACAD,oBACA4C,gBACAnD,oBACA1M,yBACAmQ,uBACG8J,MAEL,CACEvN,GAAiBvM,QACjBuP,GACAxM,EACA0M,GACAkI,KAIJ,UACEsC,MAhbF,SACErC,EACAzZ,GAEA,OAAOwZ,GAAcC,EAAYzZ,IA6ajCiO,WACA+H,UAAWjK,GACP,IAAIC,MAAMgK,GAAW,CACnBtT,IAAK,SAAC3C,EAAKgc,GAST,GAAIA,KAAQhc,EAEV,OADA4O,GAAiB9M,QAAQka,IAAQ,EAC1Bhc,EAAIgc,MAMjB/F,GACJ0E,gBACAsB,MAAOxM,eA1IK,SACZrO,EACA8a,WAEA,gBAFAA,MAEI5Q,OACF,IAAoB,IAAAxD,EAAAjC,EAAA5C,OAAO7B,OAAOK,EAAUK,wCAAU,CAAjD,IAAMD,UACT,GAAIA,EAAO,CACD,IAAAxB,EAAiBwB,MAAZlB,EAAYkB,UACnBsa,EACJlC,GAA0B5Z,IAAQhC,MAAMC,QAAQqC,GAC5CA,EAAQ,GAAGN,IACXA,EAEN,GAAIE,EAAc4b,GAChB,IACEA,EAASC,QAAQ,QAASH,QAC1B,MACA,8GAMVxa,EAAUK,QAAU,GACpBuM,GAAiBvM,QAAUsJ,GAAYhK,GAAUiN,GAAiBvM,SAClEV,GAAUoX,GAAoB,IAE9BvV,OAAO7B,OAAOkQ,GAA2BxP,SAASqI,SAChD,SAACkS,GAAoB,OAAAxT,GAAWwT,IAAoBA,OAGtD1a,GAAsBG,QAAU+C,EAC5B,GACAuG,GAAYhK,IAAW,GAjEX,SAACE,OACjBiF,WACAiK,YACA7F,gBACA+D,YACAhO,YACAoV,gBACApR,gBAEKhE,IACH+Q,GAAe3P,QAAU,GACzB4P,GAAwB5P,QAAU,IAGpCsT,GAAyBtT,QAAU,GACnC6P,EAA2B7P,QAAU,GACrCmT,EAAenT,QAAU,IAAI2J,IAC7B6J,GAAcxT,SAAU,EAExB6M,GAAgB,CACdmH,YAAaA,EAActE,GAAa1P,QAAQgU,YAAc,EAC9DtF,UAASA,GAAUgB,GAAa1P,QAAQ0O,QACxC7F,cAAaA,GAAc6G,GAAa1P,QAAQ6I,YAChDjK,UAASA,GAAU8Q,GAAa1P,QAAQpB,QACxCgE,YAAaA,EAAc8M,GAAa1P,QAAQ4C,YAAc,GAC9DgK,QAASA,EAAU8C,GAAa1P,QAAQ4M,QAAU,GAClDnI,OAAQA,EAASiL,GAAa1P,QAAQyE,OAAS,GAC/CwP,cAAc,EACdC,oBAAoB,IAuCtBsG,CAAUJ,KAuGsB,IAChCK,YAAa9M,eA9jBf,SACE/N,GAEAA,IACGrD,MAAMC,QAAQoD,GAAQA,EAAO,CAACA,IAAOyI,SAAQ,SAACqS,GAC7C,OAAA/a,EAAUK,QAAQ0a,IAAcpd,EAAMod,UAC3BhL,GAAa1P,QAAQyE,OAAOiW,GACnCrZ,EAAMqO,GAAa1P,QAAQyE,OAAQiW,MAG3C7N,GAAgB,CACdpI,OAAQ7E,EAAO8P,GAAa1P,QAAQyE,OAAS,OAmjBH,IAC5CkW,SAAUhN,eAhjBZ,SAAkB/N,EAA+BsF,GAC/C,IAAM3G,GAAOoB,EAAUK,QAAQJ,IAAS,IAAKrB,IAE7CtB,EAAIyS,GAAa1P,QAAQyE,OAAQ7E,SAC5BsF,IACH3G,SAGFsO,GAAgB,CACdjO,SAAS,IAGXsG,EAAMiN,aAAe5T,GAAOA,EAAIiP,OAASjP,EAAIiP,UAoiBP,IACtC/I,OAAQ0P,GAAU1P,QACfqV,yDkB1xCqCta,OAC1C4M,YACAxM,SACAzB,iBAEMmO,EAAU/B,KAUVvE,EAKFoG,GAAWE,EAAQF,QAJrBgH,sBACAC,+BACAsE,kBACApL,qBAEIqO,EAAcxN,aAA0B,GACxCyN,EAAQtN,WACRuN,EAAkBvN,SAAapP,GA8BrC,OA5BAgQ,aAAgB,WASd,IAAM4M,EAAMF,EAAM7a,QAAUiM,KACtB+O,EAAwB3H,EAA2BrT,QACnDib,EAAkB7H,EAAkBpT,QAK1C,OAJAib,EAAgBF,GAAM,IAAIpR,IAC1BqR,EAAsBD,GAAM,WAAM,OAAAH,EAAY,KAC9CjD,EAAc/X,EAAMkb,EAAgB9a,QAAS+a,GAEtC,kBACEE,EAAgBF,UAChBC,EAAsBD,MAE9B,CACDnb,EACAyT,EACAD,EACAuE,EACAmD,IAGKD,EAAM7a,QACT2X,EAAc/X,EAAMkb,EAAgB9a,QAAS6a,EAAM7a,SACnD1B,EAAYH,GACZgF,GAASvD,GACPiB,EAAI0L,EAAiBvM,QAASJ,GAC9BrD,MAAMC,QAAQoD,GACdA,EAAKvB,QACH,SAACS,EAAU4b,SAAc,cACpB5b,WACF4b,GAAY7Z,EAAI0L,EAAiBvM,QAAS0a,SAE7C,IAEFnO,EAAiBvM,QACnB7B"}